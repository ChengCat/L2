(++ The following functions are abbreviations of sequences of list operations
	that are frequently useful when working with s-expressions.)

(function @frst (l) [@fst [@rst [get l]]])

(function @ffrst (l) [@fst [@frst [get l]]])

(function @frfrst (l) [@fst [@rst [@frst [get l]]]])

(function @rrst (l) [@rst [@rst [get l]]])

(function @rrrst (l) [@rst [@rrst [get l]]])

(function @rfst (l) [@rst [@fst [get l]]])

(function @frfst (l) [@fst [@rfst [get l]]])

(function @frrfst (l) [@fst [@rst [@rfst [get l]]]])

(function @frrst (l) [@fst [@rst [@rst [get l]]]])

(function @frrrst (l) [@fst [@rst [@rst [@rst [get l]]]]])

(function @frrrrst (l) [@fst [@rst [@rst [@rst [@rst [get l]]]]]])

(function @frrrrrst (l) [@fst [@rst [@rst [@rst [@rst [@rst [get l]]]]]]])

(function @ffst (l) [@fst [@fst [get l]]])

(function llst (a b c r) [lst [get a] [lst [get b] [get c] [get r]] [get r]])

(function lllst (a b c d r) [lst [get a] [llst [get b] [get c] [get d] [get r]] [get r]])

(function llllst (a b c d e r) [lst [get a] [lllst [get b] [get c] [get d] [get e] [get r]] [get r]])

(function lllllst (a b c d e f r) [lst [get a] [llllst [get b] [get c] [get d] [get e] [get f] [get r]] [get r]])

(function llllllst (a b c d e f g r) [lst [get a] [lllllst [get b] [get c] [get d] [get e] [get f] [get g] [get r]] [get r]])

(function lllllllst (a b c d e f g h r) [lst [get a] [llllllst [get b] [get c] [get d] [get e] [get f] [get g] [get h] [get r]] [get r]])

(++ The following function provides an abbreviation for getting a value from a
	memory address. It implements the transformation $a -> [get a].)

(function $ (var r p)
	(if [emt? [get p]] [llst
			[llllllst -i- -n- -v- -o- -k- -e- emt [get r]]
			[lllst -g- -e- -t- emt [get r]]
			[get var][get r]]
		[get p]))

(++ The following function provides a method for commenting L2 code. It
	implements the transformation (** expr1 ... exprN) -> exprN.)

(function ** (l r p)
	(if [emt? $p]
		(with return
			{(continuation find (first last)
				(if [emt? $last]
					{return $first}
					{find [@fst $last] [@rst $last]})) [@fst $l] [@rst $l]})
		$p))

(++ The following function generates the L2 code to generate an s-expression
	corresponding to the supplied s-expression. Known as backquote in other
	languages.)

(function ` (l r p)
	(if [emt? $p]
			[(function aux (s t r)
				(if [emt? $s] [lllst -e- -m- -t- emt $r]
		
				(if (if [emt? $s] #0 (if [symbol? $s] #0 (if [emt? [@fst $s]]
					#0 (if [char= [@ffst $s] -,-] [emt? [@rfst $s]] #0))))
							[@frst $s]
		
				[lllllst [llllllst -i- -n- -v- -o- -k- -e- emt $r]
					[lllst -l- -s- -t- emt $r]
						(if [symbol? $s]
								[lllst --- [@fst $s] --- emt $r]
								[aux [@fst $s] $t $r])
							[aux [@rst $s] $t $r] $t emt $r]))) [@fst $l] [@frst $l] $r]
		$p))

(++ The following macro is defined for use in macros using memoization.
	All it does is produce code to short-circuit the construction of the
	fragment by using the supplied fragment (first item in fragment $l)
	if it is non-nil. Incidentally, the macro itself uses memoization too.)

(function use-memo (l r p)
	(if [emt? $p]
		(`(if [emt? (,[@fst $l])] (,[@frst $l]) (,[@fst $l]))$r)
		$p))

(++ The following function is a helper function for macros defining constants.
	It produces a literal from the binary value given at value.)

(function mk# (l r p value) (use-memo $p [binary->base2sexpr $value $r]))

(++ A set of macros to provide struct functionality in L2. The most naive way
	to do structs in L2 would be to create a getter function, setter function,
	and offset calculation function for every field where these functions
	simply access the desired memory locations. However this solution is
	untenable because of the amount of boilerplate that one would have to write.
	The approach taken in the below macros is to aggregate the offset, size,
	getter, and setter of each field into a higher-order macro that supplies
	this information into any macro that is passed to it. This way, generic
	getter, setter, address-of, offset-of, and sizeof functions can be defined
	once and used on any field.)

(++ The following function is a macro for getting the offset of a field of a struct.
	The macro expands into a macro invocation of the supplied field (the second
	item in the fragment $l), passing into it offset-aux (the macro that actually
	produces the offset of the field).)

(function offset-of (l r p) (use-memo $p (`((,[@fst $l]) offset-of-aux)$r)))

(++ This function is not to be called directly. It returns a fragment representing
	the offset of the field. That is, it returns the first item in the fragment $l.)
	
(function offset-of-aux (l r p) (use-memo $p [@fst $l]))

(function size-of (l r p) (use-memo $p (`((,[@fst $l]) size-of-aux)$r)))

(function size-of-aux (l r p) (use-memo $p [@frst $l]))

(function getter-of (l r p) (use-memo $p (`((,[@fst $l]) getter-of-aux)$r)))

(function getter-of-aux (l r p) (use-memo $p [@frrst $l]))

(function setter-of (l r p) (use-memo $p (`((,[@fst $l]) setter-of-aux)$r)))

(function setter-of-aux (l r p) (use-memo $p [@frrrst $l]))

(++ The following function is a macro for getting the address of a field of a struct.
	The macro expands into a macro invocation of the supplied field (the second
	item in the fragment $l), passing into it &-aux (the macro that will generate
	the actual invocation that calculates the address of the field) and the address of
	the struct (the first item in the fragment $l).)

(function & (l r p) (use-memo $p (`((,[@frst $l]) &-aux (,[@fst $l]))$r)))

(++ This function is not to be called directly. It generates the actual
	invocation to calculate the address of the field. When macro-called, it
	adds the offset (the first item in the fragment $l) to the base
	(the fifth item in the fragment $l).)
	
(function &-aux (l r p) (use-memo $p (`[+ (,[@frrrrst $l]) (,[@fst $l])]$r)))

(++ The following function is a macro for getting the field of a struct. The
	macro expands into a macro invocation of the supplied field (the second
	item in the fragment $l), passing into it @-aux (the macro that will generate
	the actual invocation that gets the field) and the address of the struct (the
	first item in the fragment $l).)
	
(function @ (l r p) (use-memo $p (`((,[@frst $l]) @-aux (,[@fst $l]))$r)))

(++ This function is not to be called directly. It generates the actual
	invocation to get the field. When macro-called, it invokes the getter
	function (the fourth item in the fragment $l) with an address formed by
	adding the offset (the first item in the fragment $l) to the base
	(the fifth item in the fragment $l).)

(function @-aux (l r p) (use-memo $p (`[(,[@frrst $l]) [+ (,[@frrrrst $l]) (,[@fst $l])]]$r)))

(++ The following function is a macro for setting the field of a struct. The
	macro expands into a macro invocation of the supplied field (the second
	item in the fragment $l), passing into it setf-aux (the macro that will generate
	the actual invocation that sets the field), the address of the struct (the
	first item in the fragment $l), and the new value of the field (the third
	item in the fragment $l).)

(function setf (l r p) (use-memo $p (`((,[@frst $l]) setf-aux (,[@fst $l]) (,[@frrst $l]))$r)))

(++ This function is not to be called directly. It generates the actual
	invocation to set the field. When macro-called, it invokes the setter
	function (the fourth item in the fragment $l) with an address formed by
	adding the offset (the first item in the fragment $l) to the base
	(the fifth item in the fragment $l) and a value (the sixth item in the
	fragment $l).)

(function setf-aux (l r p) (use-memo $p (`[(,[@frrrst $l]) [+ (,[@frrrrst $l]) (,[@fst $l])] (,[@frrrrrst $l])]$r)))

(++ The following function is a helper function for generating the fields of
	structs. All that it does is create a macro invocation on the first reference
	in the fragment $l supplying to it the offset, size, getter, and setter of
	the field in addition to the rest of the fragment $l.)

(function mk-field (l r p offset size)
	(use-memo $p [lllllst [@fst $l] [binary->base2sexpr $offset $r] [binary->base2sexpr $size $r]
		(switch = $size (#1 (` get1b $r)) (#2 (` get2b $r)) (#4 (` get4b $r)) (#8 (` get8b $r)) (null))
		(switch = $size (#1 (` set1b $r)) (#2 (` set2b $r)) (#4 (` set4b $r)) (#8 (` set8b $r)) (null))
		[@rst $l] $r]))

(++ The following function provides another method for commenting L2 code. It
	implements the transformation (++ expr1 ...) -> (begin). It is being used
	for this comment to work.)

(function ++ (l r p) (use-memo $p (`(begin)$r)))

(storage hey (" Helao))
(** dude guy (begin))
[write-str (stdout) $hey]

(** Now things are working: (let (d #5)
	(until (i #5) [= $i #23] [+ $i #1] (begin
		[write-str (stdout) (" Hello(lf))]
		[write-uint (stdout) [* $d $i]]))))
