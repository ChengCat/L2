(function char-sexpr (s)
	(`(function (,[lllst[---][ffst $s][---][nil]]) ()
		[build-character-sexpr (char (,[fst $s]))])))

(function symbol-sexpr (s)
	(`(function (,[fst $s]) (arg)
		[lst [build-symbol-sexpr ("(,[fst $s]))] $arg])))

(function character-structs () [+ [words] [words]])

(function list-flag (l) $l)

(function character (l) [+ $l [words]])

(function sexpr-structs () [+ [words] [words]])

(function lst? (s) (if ($[list-flag $s]) [true] [false]))

(function sexpr= (a b)
	(if [not [= [lst? $a] [lst? $b]]] [false]
	(if [not [lst? $a]] [= [getb[character $a]] [getb[character $b]]]
	(if [or [nil? $a] [nil? $b]] [and [nil? $a] [nil? $b]]
		[and [sexpr= [fst $a] [fst $b]] [sexpr= [rst $a] [rst $b]]]))))

(function build-character-sexpr (d) (with return
	(let (c [malloc [sexpr-structs]]) (begin
		[set [list-flag $c] [null]]
		[setb [character $c] [getb d]]
		{return $c}))))

(char-sexpr !) (char-sexpr ") (char-sexpr $) (char-sexpr %) (char-sexpr &) (char-sexpr ') (char-sexpr *) (char-sexpr +)
(char-sexpr ,) (char-sexpr -) (char-sexpr .) (char-sexpr /) (char-sexpr 0) (char-sexpr 1) (char-sexpr 2) (char-sexpr 3)
(char-sexpr 4) (char-sexpr 5) (char-sexpr 6) (char-sexpr 7) (char-sexpr 8) (char-sexpr 9) (char-sexpr :) (char-sexpr ;)
(char-sexpr <) (char-sexpr =) (char-sexpr >) (char-sexpr ?) (char-sexpr A) (char-sexpr B) (char-sexpr C) (char-sexpr D)
(char-sexpr E) (char-sexpr F) (char-sexpr G) (char-sexpr H) (char-sexpr I) (char-sexpr J) (char-sexpr K) (char-sexpr L)
(char-sexpr M) (char-sexpr N) (char-sexpr O) (char-sexpr P) (char-sexpr Q) (char-sexpr R) (char-sexpr S) (char-sexpr T)
(char-sexpr U) (char-sexpr V) (char-sexpr W) (char-sexpr X) (char-sexpr Y) (char-sexpr Z) (char-sexpr \) (char-sexpr ^)
(char-sexpr _) (char-sexpr `) (char-sexpr a) (char-sexpr b) (char-sexpr c) (char-sexpr d) (char-sexpr e) (char-sexpr f)
(char-sexpr g) (char-sexpr h) (char-sexpr i) (char-sexpr j) (char-sexpr k) (char-sexpr l) (char-sexpr m) (char-sexpr n)
(char-sexpr o) (char-sexpr p) (char-sexpr q) (char-sexpr r) (char-sexpr s) (char-sexpr t) (char-sexpr u) (char-sexpr v)
(char-sexpr w) (char-sexpr x) (char-sexpr y) (char-sexpr z) (char-sexpr |) (char-sexpr ~)

(function build-symbol-sexpr (str) (with return
	(let (sexprs [nil]) (begin
		(while [getb $str] (begin
			[append [build-character-sexpr [getb $str]] sexprs]
			[set str [+ $str &1]]))
		{return $sexprs}))))

(symbol-sexpr with)
(symbol-sexpr begin)
(symbol-sexpr if)
(symbol-sexpr function)
(symbol-sexpr continuation)
(symbol-sexpr literal)
(symbol-sexpr invoke)
(symbol-sexpr jump)
