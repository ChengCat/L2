(function zip (a b) (with return
	{(continuation aux (output a b)
		(if [not [sexpr= $a [nil]]]
			{aux [lst [llst [fst $a] [fst $b] [nil]] $output] [rst $a] [rst $b]}
			{return [reverse $output]})) [nil] $a $b}))

(function foreach (s)
	(let (bindings [reverse [rst [reverse $s]]]) (body [fst [reverse $s]])
			(labels (with return {(continuation aux (index-refs ref input-pairs)
				(if [not [sexpr= $input-pairs [nil]]]
					{aux [lst $ref $index-refs]
						[reverse [lst [-1-][reverse $ref]]]
						[rst $input-pairs]}
					{return [reverse $index-refs]})) [nil] `foreach:v [rst [reverse $s]]}))
		[lst `let [reverse [lst
			(`(while [not [nil? $foreach:v]] (,[llst `begin
				[lst `let [reverse [lst $body [map [zip [map $bindings fst] $labels]
						(function make-binding (a) (`((,[fst $a]) [fst ($(,[frst $a]))])))]]]]
				[map $labels (function make-update (a) (`[set ,$a [rst $,$a]]))]])))
			[zip $labels [map $bindings frst]]]]]))
