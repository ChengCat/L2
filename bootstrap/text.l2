(++ The following function turns a character s-expression into its equivalent
	ASCII code. So for example, the L2 expression (char A) is equivalent to the
	C literal 'A'.)

(function char (l r p) (use-memo $p
		(switch char= [@ffst $l]
			(-!- (` #33 $r)) (-"- (` #34 $r)) (-#- (` #35 $r)) (-$- (` #36 $r)) (-%- (` #37 $r)) (-&- (` #38 $r)) (-'- (` #39 $r))
			(-*- (` #42 $r)) (-+- (` #43 $r)) (-,- (` #44 $r)) (--- (` #45 $r)) (-.- (` #46 $r)) (-/- (` #47 $r)) (-0- (` #48 $r))
			(-1- (` #49 $r)) (-2- (` #50 $r)) (-3- (` #51 $r)) (-4- (` #52 $r)) (-5- (` #53 $r)) (-6- (` #54 $r)) (-7- (` #55 $r))
			(-8- (` #56 $r)) (-9- (` #57 $r)) (-:- (` #58 $r)) (-;- (` #59 $r)) (-<- (` #60 $r)) (-=- (` #61 $r)) (->- (` #62 $r))
			(-?- (` #63 $r)) (-@- (` #64 $r)) (-A- (` #65 $r)) (-B- (` #66 $r)) (-C- (` #67 $r)) (-D- (` #68 $r)) (-E- (` #69 $r))
			(-F- (` #70 $r)) (-G- (` #71 $r)) (-H- (` #72 $r)) (-I- (` #73 $r)) (-J- (` #74 $r)) (-K- (` #75 $r)) (-L- (` #76 $r))
			(-M- (` #77 $r)) (-N- (` #78 $r)) (-O- (` #79 $r)) (-P- (` #80 $r)) (-Q- (` #81 $r)) (-R- (` #82 $r)) (-S- (` #83 $r))
			(-T- (` #84 $r)) (-U- (` #85 $r)) (-V- (` #86 $r)) (-W- (` #87 $r)) (-X- (` #88 $r)) (-Y- (` #89 $r)) (-Z- (` #90 $r))
			(-\- (` #92 $r)) (-^- (` #94 $r)) (-_- (` #95 $r)) (-`- (` #96 $r)) (-a- (` #97 $r)) (-b- (` #98 $r)) (-c- (` #99 $r))
			(-d- (` #100 $r)) (-e- (` #101 $r)) (-f- (` #102 $r)) (-g- (` #103 $r)) (-h- (` #104 $r)) (-i- (` #105 $r))
			(-j- (` #106 $r)) (-k- (` #107 $r)) (-l- (` #108 $r)) (-m- (` #109 $r)) (-n- (` #110 $r)) (-o- (` #111 $r))
			(-p- (` #112 $r)) (-q- (` #113 $r)) (-r- (` #114 $r)) (-s- (` #115 $r)) (-t- (` #116 $r)) (-u- (` #117 $r))
			(-v- (` #118 $r)) (-w- (` #119 $r)) (-x- (` #120 $r)) (-y- (` #121 $r)) (-z- (` #122 $r)) (-|- (` #124 $r))
			(-~- (` #126 $r)) (` #0 $r))))

(++ The following function turns text in the form of a list of s-expressions
	into code that allocates a buffer on the stack and puts the equivalent
	C-string into it. So for example, the L2 expression (" Hello world.) is
	the same as the C literal "Hello world." except that it is allocated on the
	stack.)

(function " (l r p) (use-memo $p (with return
	{(continuation add-word (str index instrs)
		(if [emt? $str]
			{return (`(with dquote:return
				(,[llst (` begin $r) [llst (` storage $r) (` dquote:str $r)
						(with return {(continuation _ (phs num)
							(if $num
								{_ [lst (` #0 $r) $phs $r] [- $num #1]}
								{return $phs})) emt [+[/ $index (unit)]#1]}) $r] [meta:reverse [llst
					(`{dquote:return dquote:str}$r)
					(`[setb [+ dquote:str (,[binary->base2sexpr [- $index #1]$r])] #0]$r)
					$instrs $r]$r]$r]))$r)}
			
			{(continuation add-char (word index instrs)
					(if [emt? $word]
						{add-word [@rst $str] [+ $index #1]
							[lst (`[setb [+ dquote:str (,[binary->base2sexpr $index $r])] #32]$r) $instrs $r]}
						(if [symbol? $word]
							{add-char [@rst $word] [+ $index #1]
								[lst (`[setb [+ dquote:str (,[binary->base2sexpr $index $r])]
									(,[char [lst [lst [@fst $word] emt $r] emt $r]$r emt])]$r) $instrs $r]}
							{add-char emt [+ $index #1]
								[lst (`[setb [+ dquote:str (,[binary->base2sexpr $index $r])] ,$word]$r) $instrs $r]})))
				[@fst $str] $index $instrs})) $l #0 emt})))

(++ The following functions implement ASCII control characters. These can be
	embedded into uses of the quote function above. So for example, the L2
	expression (" Hello(lf)Bye) is equivalent to the C literal "Hello \nBye".)

(function nul (l r p) (use-memo $p (` #0 $r)))

(function bel (l r p) (use-memo $p (` #7 $r)))

(function bs (l r p) (use-memo $p (` #8 $r)))

(function ht (l r p) (use-memo $p (` #9 $r)))

(function lf (l r p) (use-memo $p (` #10 $r)))

(function cr (l r p) (use-memo $p (` #13 $r)))

(function vt (l r p) (use-memo $p (` #11 $r)))

(function ff (l r p) (use-memo $p (` #12 $r)))

(function lparen (l r p) (use-memo $p (` #40 $r)))

(function rparen (l r p) (use-memo $p (` #41 $r)))

(function lbrace (l r p) (use-memo $p (` #123 $r)))

(function rbrace (l r p) (use-memo $p (` #125 $r)))

(function lbracket (l r p) (use-memo $p (` #91 $r)))

(function rbracket (l r p) (use-memo $p (` #93 $r)))

(function space (l r p) (use-memo $p (` #32 $r)))
