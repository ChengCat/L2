(++ The following function turns a character s-expression into its equivalent
	ASCII code. So for example, the L2 expression (char A) is equivalent to the
	C literal 'A'.)

(function char (l r)
	(switch char= [ffst $l]
		([-!- $r] (` &33 $r)) ([-"- $r] (` &34 $r)) ([-$- $r] (` &36 $r)) ([-%- $r] (` &37 $r)) ([-&- $r] (` &38 $r))
		([-'- $r] (` &39 $r)) ([-*- $r] (` &42 $r)) ([-+- $r] (` &43 $r)) ([-,- $r] (` &44 $r)) ([--- $r] (` &45 $r))
		([-.- $r] (` &46 $r)) ([-/- $r] (` &47 $r)) ([-0- $r] (` &48 $r)) ([-1- $r] (` &49 $r)) ([-2- $r] (` &50 $r))
		([-3- $r] (` &51 $r)) ([-4- $r] (` &52 $r)) ([-5- $r] (` &53 $r)) ([-6- $r] (` &54 $r)) ([-7- $r] (` &55 $r))
		([-8- $r] (` &56 $r)) ([-9- $r] (` &57 $r)) ([-:- $r] (` &58 $r)) ([-;- $r] (` &59 $r)) ([-<- $r] (` &60 $r))
		([-=- $r] (` &61 $r)) ([->- $r] (` &62 $r)) ([-?- $r] (` &63 $r)) ([-A- $r] (` &65 $r)) ([-B- $r] (` &66 $r))
		([-C- $r] (` &67 $r)) ([-D- $r] (` &68 $r)) ([-E- $r] (` &69 $r)) ([-F- $r] (` &70 $r)) ([-G- $r] (` &71 $r))
		([-H- $r] (` &72 $r)) ([-I- $r] (` &73 $r)) ([-J- $r] (` &74 $r)) ([-K- $r] (` &75 $r)) ([-L- $r] (` &76 $r))
		([-M- $r] (` &77 $r)) ([-N- $r] (` &78 $r)) ([-O- $r] (` &79 $r)) ([-P- $r] (` &80 $r)) ([-Q- $r] (` &81 $r))
		([-R- $r] (` &82 $r)) ([-S- $r] (` &83 $r)) ([-T- $r] (` &84 $r)) ([-U- $r] (` &85 $r)) ([-V- $r] (` &86 $r))
		([-W- $r] (` &87 $r)) ([-X- $r] (` &88 $r)) ([-Y- $r] (` &89 $r)) ([-Z- $r] (` &90 $r)) ([-\- $r] (` &92 $r))
		([-^- $r] (` &94 $r)) ([-_- $r] (` &95 $r)) ([-`- $r] (` &96 $r)) ([-a- $r] (` &97 $r)) ([-b- $r] (` &98 $r))
		([-c- $r] (` &99 $r)) ([-d- $r] (` &100 $r)) ([-e- $r] (` &101 $r)) ([-f- $r] (` &102 $r)) ([-g- $r] (` &103 $r))
		([-h- $r] (` &104 $r)) ([-i- $r] (` &105 $r)) ([-j- $r] (` &106 $r)) ([-k- $r] (` &107 $r)) ([-l- $r] (` &108 $r))
		([-m- $r] (` &109 $r)) ([-n- $r] (` &110 $r)) ([-o- $r] (` &111 $r)) ([-p- $r] (` &112 $r)) ([-q- $r] (` &113 $r))
		([-r- $r] (` &114 $r)) ([-s- $r] (` &115 $r)) ([-t- $r] (` &116 $r)) ([-u- $r] (` &117 $r)) ([-v- $r] (` &118 $r))
		([-w- $r] (` &119 $r)) ([-x- $r] (` &120 $r)) ([-y- $r] (` &121 $r)) ([-z- $r] (` &122 $r)) ([-|- $r] (` &124 $r))
		([-~- $r] (` &126 $r)) (` &0 $r)))

(++ The following function turns text in the form of a list of s-expressions
	into code that allocates a buffer on the stack and puts the equivalent
	C-string into it. So for example, the L2 expression (" Hello world.) is
	the same as the C literal "Hello world." except that it is allocated on the
	stack.)

(function " (l r) (with return
	{(continuation add-word (str index instrs)
		(if [emt? $str]
			{return (`(with dquote:return
				[allocate (,[binary->base2sexpr $index $r])
					(continuation _ (str) (,[lst (` begin $r) [meta:reverse [llst
						(`{dquote:return $str}$r)
						(`[setb [+ $str (,[binary->base2sexpr [- $index &1]$r])] &0]$r)
						$instrs $r]$r]$r]))])$r)}
			
			{(continuation add-char (word index instrs)
					(if [emt? $word]
						{add-word [rst $str] [+ $index &1]
							[lst (`[setb [+ $str (,[binary->base2sexpr $index $r])] &32]$r) $instrs $r]}
						(if [lst? [fst $word]]
							{add-char [emt $r] [+ $index &1]
								[lst (`[setb [+ $str (,[binary->base2sexpr $index $r])] ,$word]$r) $instrs $r]}
							{add-char [rst $word] [+ $index &1]
								[lst (`[setb [+ $str (,[binary->base2sexpr $index $r])]
									(,[char [lst [lst [fst $word] [emt $r]$r] [emt $r]$r]$r])]$r) $instrs $r]})))
				[fst $str] $index $instrs})) $l &0 [emt $r]}))

(++ The following functions implement ASCII control characters. These can be
	embedded into uses of the quote function above. So for example, the L2
	expression (" Hello(lf)Bye) is equivalent to the C literal "Hello \nBye".)

(function nul (l r) (` &0 $r))

(function bel (l r) (` &7 $r))

(function bs (l r) (` &8 $r))

(function ht (l r) (` &9 $r))

(function lf (l r) (` &10 $r))

(function cr (l r) (` &13 $r))

(function vt (l r) (` &11 $r))

(function ff (l r) (` &12 $r))

(function lparen (l r) (` &40 $r))

(function rparen (l r) (` &41 $r))

(function lbrace (l r) (` &123 $r))

(function rbrace (l r) (` &125 $r))

(function lbracket (l r) (` &91 $r))

(function rbracket (l r) (` &93 $r))

(function space (l r) (` &32 $r))
