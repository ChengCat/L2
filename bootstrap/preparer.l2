(function defined-str= (a b) (and $a $b [str= $a $b]))

(function named-ref= (a b) [defined-str= (@ expr-name $a) (@ expr-name $b)])

(storage multiple-definition-error #0)

(function vfind-multiple-definitions (e handler) (with return
	(switch = (@ expr-type $e)
		((-begin-) (let (temp-reg [create-buffer #0]) (begin
			(let (definitions [filter (function _ (f) (or [= (@ expr-type $f) (-storage-)] [= (@ expr-type $f) (-function-)]))
					(@ expr-expressions $e) $temp-reg])
				(until (partial $definitions) [nil? $partial] [@cdr $partial]
					(if [find (function _ (f ctx) [named-ref= (@ expr-reference $f) (@ expr-reference $ctx)])
							(& cdr $partial) [@car $partial]]
						{$handler multiple-definition-error (@ expr-name(@ expr-reference[@car $partial]))}
						(begin))))
			[destroy-buffer $temp-reg]
			{return $e})))
		
		((-continuation-) (-function-) (let (temp-reg [create-buffer #0]) (begin
			(let (ref-with-params [lst (@ expr-reference $e) (@ expr-parameters $e) $temp-reg])
				(until (partial $ref-with-params) [nil? $partial] [@cdr $partial]
					(if [find (function _ (f ctx) [named-ref= $f $ctx]) (& cdr $partial) [@car $partial]]
						{$handler multiple-definition-error (@ expr-name[@car $partial])}
						(begin))))
			[destroy-buffer $temp-reg]
			{return $e})))
		
		{return $e})))

(function get-parent-function (n) (with return
	{(continuation loop (n)
		(if [= (@ expr-type $n) (-function-)]
			{return $n}
			{loop (@ expr-parent $n)})) (@ expr-parent $n)}))

(function symbol-of (reference) (with return (begin
	(let (same-func (true))
		(until (t $reference) [= $t (null)] (@ expr-parent $t)
			(switch = (@ expr-type $t)
				((-begin-) (foreach (u (@ expr-expressions $t))
					(if (and (or [= (@ expr-type $u) (-function-)] (and [= (@ expr-type $u) (-storage-)] (or $same-func
							[= (@ sym-type(@ expr-symbol(@ expr-reference $u))) (static-storage)])))
							[named-ref= (@ expr-reference $u) $reference])
						{return (@ expr-symbol(@ expr-reference $u))}
						(begin))))
				
				((-function-) (begin
					(if [named-ref= (@ expr-reference $t) $reference]
						{return (@ expr-symbol(@ expr-reference $t))}
						(foreach (u (@ expr-parameters $t))
							(if (and (or $same-func [= (@ sym-type(@ expr-symbol $u)) (static-storage)]) [named-ref= $u $reference])
								{return (@ expr-symbol $u)}
								(begin))))
					[set same-func (false)]))
				
				((-continuation-) (-with-) (-storage-)
					(if (and (or $same-func [= (@ sym-type(@ expr-symbol(@ expr-reference $t))) (static-storage)])
							[named-ref= (@ expr-reference $t) $reference])
						{return (@ expr-symbol(@ expr-reference $t))}
					(if [= (@ expr-type $t) (-storage-)] (begin)
						(foreach (u (@ expr-parameters $t))
							(if (and (or $same-func [= (@ sym-type(@ expr-symbol $u)) (static-storage)]) [named-ref= $u $reference])
								{return (@ expr-symbol $u)}
								(begin))))))
				
				(begin))))
	{return (null)})))

(function jump-reference? (s) (and [= (@ expr-type(@ expr-parent $s)) (-jump-)] [= (@ expr-reference(@ expr-parent $s)) $s]))

(function invoke-reference? (s) (and [= (@ expr-type(@ expr-parent $s)) (-invoke-)] [= (@ expr-reference(@ expr-parent $s)) $s]))

(function function-reference? (s) (and [= (@ expr-type(@ expr-parent $s)) (-function-)] [= (@ expr-reference(@ expr-parent $s)) $s]))

(function c-reference? (s)
	(and (or [= (@ expr-type(@ expr-parent $s)) (-continuation-)] [= (@ expr-type(@ expr-parent $s)) (-with-)])
		[= (@ expr-reference(@ expr-parent $s)) $s]))

(function get-target-expression (s) (@ expr-parent(@ sym-definition(@ expr-symbol $s))))

(function get-root-function (s) (with return
	{(continuation loop (s parent)
		(if $parent
			{loop $parent (@ expr-parent $parent)}
			{return $s})) $s (@ expr-parent $s)}))

(storage param-count-mismatch-error #0)

(function vlink-references (s ctx)
	(let (handler ($(loc $ctx #0(unit)))) (r ($(loc $ctx #1(unit))))
		(if [= (@ expr-type $s) (-reference-)]
			(with return (begin
				(setf expr-symbol $s (if (@ expr-symbol $s) (@ expr-symbol $s) [symbol-of $s]))
				(if (not (@ expr-symbol $s))
					(let (ref [make-reference (@ expr-name $s) $r]) (rf [get-root-function $s])
						(let (sym [make-symbol (static-storage) (global-scope) (undefined-state) (@ expr-name $s) $ref $r]) (begin
							(setf expr-symbol $ref $sym)
							(setf expr-parameters $rf [cons $ref (@ expr-parameters $rf) $r])
							(setf expr-parent $ref $rf)
							(setf expr-symbol $s $sym)
							{return $s})))
				(if (and (or (and [jump-reference? $s] [c-reference? (@ sym-definition(@ expr-symbol $s))])
						(and [invoke-reference? $s] [function-reference? (@ sym-definition(@ expr-symbol $s))]))
						(not [= [length(@ expr-arguments(@ expr-parent $s))] [length(@ expr-parameters[get-target-expression $s])]]))
					{$handler param-count-mismatch-error (@ expr-parent $s) [get-target-expression $s]}
					{return $s}))))
		(if (and (or (and [= (@ expr-type $s) (-continuation-)] [jump-reference? $s])
				(and [= (@ expr-type $s) (-function-)] [invoke-reference? $s]))
				(not [= [length (@ expr-arguments(@ expr-parent $s))] [length (@ expr-parameters $s)]]))
			{$handler param-count-mismatch-error (@ expr-parent $s) $s}
			$s))))

(function vescape-analysis-aux (ref target)
	(if [jump-reference? $ref]
		(setf expr-short-circuit (@ expr-parent $ref) $target)
		(setf expr-escapes $target (true))))

(function vescape-analysis (s ctx) (with return (begin
	(if (and [= (@ expr-type $s) (-reference-)] (not [= (@ sym-definition(@ expr-symbol $s)) $s])
			[c-reference? (@ sym-definition(@ expr-symbol $s))])
		[vescape-analysis-aux $s [get-target-expression $s]]
		[vescape-analysis-aux $s $s])
	{return $s})))

(function visit-expressions (visitor s ctx) (begin
	(switch = (@ expr-type $$s)
		((-begin-)
			(until (partial (@ expr-expressions $$s)) [nil? $partial] [@cdr $partial]
				[visit-expressions $visitor (& car $partial) $ctx]))
		
		((-if-) (begin
			[visit-expressions $visitor (& expr-condition $$s) $ctx]
			[visit-expressions $visitor (& expr-consequent $$s) $ctx]
			[visit-expressions $visitor (& expr-alternate $$s) $ctx]))
		
		((-function-) (-continuation-) (-with-)
			[visit-expressions $visitor (& expr-expression $$s) $ctx])
		
		((-jump-) (-invoke-) (-storage-) (begin
			(if [= (@ expr-type $$s) (-storage-)] (begin) [visit-expressions $visitor (& expr-reference $$s) $ctx])
			(until (partial (@ expr-arguments $$s)) [nil? $partial] [@cdr $partial]
				[visit-expressions $visitor (& car $partial) $ctx])))
		
		(begin))
	(replace-expression $s [$visitor $$s $ctx])))

(function pre-visit-expressions (visitor s ctx) (begin
	(replace-expression $s [$visitor $$s $ctx])
	
	(switch = (@ expr-type $$s)
		((-begin-)
			(until (partial (@ expr-expressions $$s)) [nil? $partial] [@cdr $partial]
				[pre-visit-expressions $visitor (& car $partial) $ctx]))
		
		((-if-) (begin
			[pre-visit-expressions $visitor (& expr-condition $$s) $ctx]
			[pre-visit-expressions $visitor (& expr-consequent $$s) $ctx]
			[pre-visit-expressions $visitor (& expr-alternate $$s) $ctx]))
		
		((-function-) (-continuation-) (-with-)
			[pre-visit-expressions $visitor (& expr-expression $$s) $ctx])
		
		((-jump-) (-invoke-) (-storage-) (begin
			(if [= (@ expr-type $$s) (-storage-)] (begin) [pre-visit-expressions $visitor (& expr-reference $$s) $ctx])
			(until (partial (@ expr-arguments $$s)) [nil? $partial] [@cdr $partial]
				[pre-visit-expressions $visitor (& car $partial) $ctx])))
		
		(begin))))

(function use-return-symbol (n ret-sym r) (with return
	(switch = (@ expr-type $n)
		((-with-) (-continuation-) (begin
			(setf expr-return-symbol $n $ret-sym)
			(put expr-expression $n [use-return-symbol (@ expr-expression $n)
				[make-symbol (dynamic-storage) (local-scope) (defined-state) (null) (null) $r] $r])
			{return $n}))
		
		((-function-) (begin
			(setf expr-return-symbol $n $ret-sym)
			(setf expr-expression-return-symbol $n [make-symbol (dynamic-storage) (local-scope) (defined-state) (null) (null) $r])
			(put expr-expression $n [use-return-symbol (@ expr-expression $n) (@ expr-expression-return-symbol $n) $r])
			{return $n}))
		
		((-invoke-) (-jump-) (-storage-)
			(let (container nil) (begin
				(if [= (@ expr-type $n) (-storage-)] (begin)
					(let (ref-ret-sym [make-symbol (dynamic-storage) (local-scope) (defined-state) (null) (null) $r]) (begin
						[append [use-return-symbol (@ expr-reference $n) $ref-ret-sym $r] container $r]
						(put expr-reference $n [use-symbol $ref-ret-sym $r]))))
						
				(until (partial (@ expr-arguments $n)) [nil? $partial] [@cdr $partial]
					(let (arg-ret-sym [make-symbol (dynamic-storage) (local-scope) (defined-state) (null) (null) $r]) (begin
						[append [use-return-symbol [@car $partial] $arg-ret-sym $r] container $r]
						(replace-expression (& car $partial) [use-symbol $arg-ret-sym $r]))))
				
				(setf expr-return-symbol $n $ret-sym)
				[append $n container $r]
				{return [make-begin $container $r]})))
		
		((-if-) (let (container nil) (begin
			(put expr-consequent $n [use-return-symbol (@ expr-consequent $n) $ret-sym $r])
			(put expr-alternate $n [use-return-symbol (@ expr-alternate $n) $ret-sym $r])
			(let (cond-ret-sym [make-symbol (dynamic-storage) (local-scope) (defined-state) (null) (null) $r]) (begin
				[append [use-return-symbol (@ expr-condition $n) $cond-ret-sym $r] container $r]
				(put expr-condition $n [use-symbol $cond-ret-sym $r])
				[append $n container $r]))
			{return [make-begin $container $r]})))
		
		((-begin-) (begin
			(until (partial (@ expr-expressions $n)) [nil? $partial] [@cdr $partial]
				(replace-expression (& car $partial) [use-return-symbol [@car $partial]
					[make-symbol (dynamic-storage) (local-scope) (defined-state) (null) (null) $r] $r]))
			{return $n}))
		
		((-reference-) (-literal-) (begin
			(setf expr-return-symbol $n $ret-sym)
			{return $n}))
		
		{return $n})))

(function vlinearized-expressions (n ctx)
	(if [= (@ expr-type $n) (-begin-)]
		$n
		(with return
			(let (l ($(loc $ctx #0(unit)))) (r ($(loc $ctx #1(unit)))) (begin
				[prepend $n $l $r]
				{return $n})))))

(function classify-program-symbols (expr) (begin
	(if (@ expr-return-symbol $expr) (setf sym-type (@ expr-return-symbol $expr) (static-storage)) (begin))
	(switch = (@ expr-type $expr)
		((-begin-) (foreach (t (@ expr-expressions $expr)) [classify-program-symbols $t]))
		
		((-storage-) (-jump-) (-invoke-) (begin
			(if [= (@ expr-type $expr) (-storage-)]
				(setf sym-type (@ expr-symbol(@ expr-reference $expr)) (static-storage))
				[classify-program-symbols (@ expr-reference $expr)])
			(foreach (t (@ expr-arguments $expr)) [classify-program-symbols $t])))
		
		((-continuation-) (-with-) (begin
			(setf sym-type (@ expr-symbol(@ expr-reference $expr)) (static-storage))
			(foreach (t (@ expr-parameters $expr)) (setf sym-type (@ expr-symbol $t) (static-storage)))
			[classify-program-symbols (@ expr-expression $expr)]))
		
		((-if-) (begin
			[classify-program-symbols (@ expr-condition $expr)]
			[classify-program-symbols (@ expr-consequent $expr)]
			[classify-program-symbols (@ expr-alternate $expr)]))
		
		(begin))))

(function expansion-context (l r) [mk# $l $r #32])
(function ectx-symbols (l r) [mk-field $l $r #0 #8])
(function ectx-obj-buf (l r) [mk-field $l $r #8 #8])
(function ectx-handler (l r) [mk-field $l $r #16 #8])
(function ectx-expr-buf (l r) [mk-field $l $r #24 #8])

(storage undefined-reference-error)

(function vgenerate-metas (s ectx)
	(if [= (@ expr-type $s) (-meta-)]
		(with return (begin
			(foreach (sym (@ ectx-symbols $ectx))
				(if [str= (@ sym-name $sym) (@ expr-name (@ expr-reference $s))]
					{return [vgenerate-metas [build-expression [(@ sym-offset $sym) (@ expr-argument $s) (@ ectx-expr-buf $ectx)]
						(@ ectx-expr-buf $ectx) (@ ectx-handler $ectx)] $ectx]} (begin)))
			[write-str (stdout) (" Again made it here!)]
			{(@ ectx-handler $ectx) undefined-reference-error (@ expr-name (@ expr-reference $s))}))
		$s))

(function init-storage (data storage-expr ectx cache)
	(if $$cache $$cache (with return (begin
		(storage expr-buf (@ ectx-expr-buf $ectx))
		(storage sets nil)
		(foreach (arg (@ expr-arguments $storage-expr)) (begin
			[pre-visit-expressions vgenerate-metas arg $ectx]
			[append (make-invokeN [make-literal set $expr-buf] ([make-literal $data $expr-buf] $arg) $expr-buf) sets $expr-buf]
			[set data [+ $data (unit)]]))
		[set $cache [segment [load-program-and-mutate [make-program $sets $expr-buf] $ectx] (" .text)]]
		{return $$cache}))))

(function init-function (function-expr ectx cache)
	(if $$cache $$cache (with return (begin
		[pre-visit-expressions vgenerate-metas function-expr $ectx]
		(storage expr-buf (@ ectx-expr-buf $ectx))
		[load-program-and-mutate [make-program [lst $function-expr nil $expr-buf] $expr-buf] $ectx]
		[set $cache (@ sym-offset (@ expr-symbol (@ expr-reference function-expr)))]
		{return $$cache}))))

(function init-expression (expr ectx cache)
	(if $$cache $$cache (with return (begin
		[pre-visit-expressions vgenerate-metas expr $ectx]
		(storage expr-buf (@ ectx-expr-buf $ectx))
		[set $cache [segment [load-program-and-mutate [make-program [lst $expr nil $expr-buf] $expr-buf] $ectx] (" .text)]]
		{return $$cache}))))

(function generate-metaprogram (program ectx) (with return (begin
	(storage c nil)
	(storage expr-buf (@ ectx-expr-buf $ectx))
	(foreach (s (@ expr-expressions (@ expr-expression $program))) (begin
		(storage cache [buffer-alloc (@ ectx-obj-buf $ectx) (unit)])
		[set $cache (null)]
		(if [= (@ expr-type $s) (-storage-)] (begin
			(storage args nil)
			(foreach (_ (@ expr-arguments $s)) [prepend [make-begin nil $expr-buf] args $expr-buf])
			(storage storage-ref [make-reference (@ expr-name (@ expr-reference $s)) $expr-buf])
			[append [make-storage $storage-ref $args $expr-buf] c $expr-buf]
			(storage storage-ref-arg [make-reference (null) $expr-buf])
			[refer-reference $storage-ref-arg $storage-ref]
			[append (make-invokeN (make-invokeN [make-literal init-storage $expr-buf] ($storage-ref-arg [make-literal $s $expr-buf]
				[make-literal $ectx $expr-buf] [make-literal $cache $expr-buf]) $expr-buf) () $expr-buf) c $expr-buf])
				
		(if [= (@ expr-type $s) (-function-)] (begin
			(storage params nil)
			(storage args nil)
			(foreach (_ (@ expr-parameters $s)) (begin
				[prepend [make-reference (null) $expr-buf] params $expr-buf]
				[prepend (make-invokeN [make-literal get $expr-buf] ([make-reference (null) $expr-buf]) $expr-buf) args $expr-buf]))
			[append [make-function [make-reference (@ expr-name (@ expr-reference $s)) $expr-buf] $params
				[make-invoke (make-invokeN [make-literal init-function $expr-buf] ([make-literal $s $expr-buf]
				[make-literal $ectx $expr-buf] [make-literal $cache $expr-buf]) $expr-buf) $args $expr-buf] $expr-buf] c $expr-buf]
			(foreach (a $params) (t $args) [refer-reference [@fst(@ expr-arguments $t)] $a]))
			
		(begin
			[append (make-invokeN (make-invokeN [make-literal init-expression $expr-buf] ([make-literal $s $expr-buf]
				[make-literal $ectx $expr-buf] [make-literal $cache $expr-buf]) $expr-buf) () $expr-buf) c $expr-buf])))))
	{return [make-program $c $expr-buf]})))

