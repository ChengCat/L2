(++ ELF-64 Object File Format)

(++ Data representation: ELF64 Data Types)

(function elf64-addr (l r p) [mk& $l $r $p #8])
(function elf64-off (l r p) [mk& $l $r $p #8])
(function elf64-half (l r p) [mk& $l $r $p #2])
(function elf64-word (l r p) [mk& $l $r $p #4])
(function elf64-sword (l r p) [mk& $l $r $p #4])
(function elf64-xword (l r p) [mk& $l $r $p #8])
(function elf64-sxword (l r p) [mk& $l $r $p #8])

(++ File header: ELF-64 Header)

(function elf64-ehdr (l r p) [mk& $l $r $p #64])

(function e-ident (l r p) [mk-field $l $r $p #0 #16])
(function e-type (l r p) [mk-field $l $r $p #16 #2])
(function e-machine (l r p) [mk-field $l $r $p #18 #2])
(function e-version (l r p) [mk-field $l $r $p #20 #4])
(function e-entry (l r p) [mk-field $l $r $p #24 #8])
(function e-phoff (l r p) [mk-field $l $r $p #32 #8])
(function e-shoff (l r p) [mk-field $l $r $p #40 #8])
(function e-flags (l r p) [mk-field $l $r $p #48 #4])
(function e-ehsize (l r p) [mk-field $l $r $p #52 #2])
(function e-phentsize (l r p) [mk-field $l $r $p #54 #2])
(function e-phnum (l r p) [mk-field $l $r $p #56 #2])
(function e-shentsize (l r p) [mk-field $l $r $p #58 #2])
(function e-shnum (l r p) [mk-field $l $r $p #60 #2])
(function e-shstrndx (l r p) [mk-field $l $r $p #62 #2])

(++ File header: ELF Identification, e-ident)

(function ei-mag0 (l r p) [mk-field $l $r $p #0 #1])
(function ei-mag1 (l r p) [mk-field $l $r $p #1 #1])
(function ei-mag2 (l r p) [mk-field $l $r $p #2 #1])
(function ei-mag3 (l r p) [mk-field $l $r $p #3 #1])
(function ei-class (l r p) [mk-field $l $r $p #4 #1])
(function ei-data (l r p) [mk-field $l $r $p #5 #1])
(function ei-version (l r p) [mk-field $l $r $p #6 #1])
(function ei-osabi (l r p) [mk-field $l $r $p #7 #1])
(function ei-abiversion (l r p) [mk-field $l $r $p #8 #1])

(function ei-pad (l r p) [mk& $l $r $p #9])
(function ei-nident (l r p) [mk& $l $r $p #16])

(++ File header: Object File Classes, e-ident > ei-class)

(function elfclass32 (l r p) [mk& $l $r $p #1])
(function elfclass64 (l r p) [mk& $l $r $p #2])

(++ File header: Data Encodings, e-ident > ei-data)

(function elfdata2lsb (l r p) [mk& $l $r $p #1])
(function elfdata3msb (l r p) [mk& $l $r $p #2])

(++ File header: Operating System and ABI Identifiers, e-ident > ei-osabi)

(function elfosabi-sysv (l r p) [mk& $l $r $p #0])
(function elfosabi-hpux (l r p) [mk& $l $r $p #1])
(function elfosabi-standalone (l r p) [mk& $l $r $p #255])

(++ File header: Object File Types, e-type)

(function et-none (l r p) [mk& $l $r $p #0])
(function et-rel (l r p) [mk& $l $r $p #1])
(function et-exec (l r p) [mk& $l $r $p #2])
(function et-dyn (l r p) [mk& $l $r $p #3])
(function et-core (l r p) [mk& $l $r $p #4])
(function et-loos (l r p) [mk& $l $r $p #65024])
(function et-hios (l r p) [mk& $l $r $p #65279])
(function et-loproc (l r p) [mk& $l $r $p #65280])
(function et-hiproc (l r p) [mk& $l $r $p #65535])

(++ Sections: Section indicies)

(function shn-undef (l r p) [mk& $l $r $p #0])
(function shn-loproc (l r p) [mk& $l $r $p #65280])
(function shn-hiproc (l r p) [mk& $l $r $p #65311])
(function shn-loos (l r p) [mk& $l $r $p #65312])
(function shn-hios (l r p) [mk& $l $r $p #65343])
(function shn-abs (l r p) [mk& $l $r $p #65521])
(function shn-common (l r p) [mk& $l $r $p #65522])

(++ Sections: Section header entries)

(function elf64-shdr (l r p) [mk& $l $r $p #64])

(function sh-name (l r p) [mk-field $l $r $p #0 #4])
(function sh-type (l r p) [mk-field $l $r $p #4 #4])
(function sh-flags (l r p) [mk-field $l $r $p #8 #8])
(function sh-addr (l r p) [mk-field $l $r $p #16 #8])
(function sh-offset (l r p) [mk-field $l $r $p #24 #8])
(function sh-size (l r p) [mk-field $l $r $p #32 #8])
(function sh-link (l r p) [mk-field $l $r $p #40 #4])
(function sh-info (l r p) [mk-field $l $r $p #44 #4])
(function sh-addralign (l r p) [mk-field $l $r $p #48 #8])
(function sh-entsize (l r p) [mk-field $l $r $p #56 #8])

(++ Sections: Section Types)

(function sht-null (l r p) [mk& $l $r $p #0])
(function sht-progbits (l r p) [mk& $l $r $p #1])
(function sht-symtab (l r p) [mk& $l $r $p #2])
(function sht-strtab (l r p) [mk& $l $r $p #3])
(function sht-rela (l r p) [mk& $l $r $p #4])
(function sht-hash (l r p) [mk& $l $r $p #5])
(function sht-dynamic (l r p) [mk& $l $r $p #6])
(function sht-note (l r p) [mk& $l $r $p #7])
(function sht-nobits (l r p) [mk& $l $r $p #8])
(function sht-rel (l r p) [mk& $l $r $p #9])
(function sht-shlib (l r p) [mk& $l $r $p #10])
(function sht-dynsym (l r p) [mk& $l $r $p #11])
(function sht-loos (l r p) [mk& $l $r $p #1610612736])
(function sht-hios (l r p) [mk& $l $r $p #1879048191])
(function sht-loproc (l r p) [mk& $l $r $p #1879048192])
(function sht-hiproc (l r p) [mk& $l $r $p #2147483647])

(++ Sections: Section Attributes, sh-flags)

(function shf-write (l r p) [mk& $l $r $p #1])
(function shf-alloc (l r p) [mk& $l $r $p #2])
(function shf-execinstr (l r p) [mk& $l $r $p #4])
(function shf-maskos (l r p) [mk& $l $r $p #251658240])
(function shf-maskproc (l r p) [mk& $l $r $p #4026531840])

(++ Symbol Table: ELF-64 Symbol Table Entry)

(function elf64-sym (l r p) [mk& $l $r $p #24])

(function st-name (l r p) [mk-field $l $r $p #0 #4])
(function st-info (l r p) [mk-field $l $r $p #4 #1])
(function st-other (l r p) [mk-field $l $r $p #5 #1])
(function st-shndx (l r p) [mk-field $l $r $p #6 #2])
(function st-value (l r p) [mk-field $l $r $p #8 #8])
(function st-size (l r p) [mk-field $l $r $p #16 #8])

(++ Symbol Table: Symbol Bindings)

(function stb-local (l r p) [mk& $l $r $p #0])
(function stb-global (l r p) [mk& $l $r $p #1])
(function stb-weak (l r p) [mk& $l $r $p #2])
(function stb-loos (l r p) [mk& $l $r $p #10])
(function stb-hios (l r p) [mk& $l $r $p #12])
(function stb-loproc (l r p) [mk& $l $r $p #13])
(function stb-hiproc (l r p) [mk& $l $r $p #15])

(function elf64-st-bind (l r p) (use-memo $p (`[>> (,[@fst $l]) #4]$r)))
(function elf64-st-type (l r p) (use-memo $p (`[land (,[@fst $l]) #15]$r)))
(function elf64-st-info (l r p) (use-memo $p (`[+ [<< (,[@fst $l]) #4] [land (,[@frst $l]) #15]]$r)))

(++ Symbol Table: Symbol Types)

(function stt-notype (l r p) [mk& $l $r $p #0])
(function stt-object (l r p) [mk& $l $r $p #1])
(function stt-func (l r p) [mk& $l $r $p #2])
(function stt-section (l r p) [mk& $l $r $p #3])
(function stt-file (l r p) [mk& $l $r $p #4])
(function stt-loos (l r p) [mk& $l $r $p #10])
(function stt-hios (l r p) [mk& $l $r $p #12])
(function stt-loproc (l r p) [mk& $l $r $p #13])
(function stt-hiproc (l r p) [mk& $l $r $p #15])

(++ Relocations: ELF-64 Relocation Entries)

(function elf64-rel (l r p) [mk& $l $r $p #16])
(function elf64-rela (l r p) [mk& $l $r $p #24])

(function r-offset (l r p) [mk-field $l $r $p #0 #8])
(function r-info (l r p) [mk-field $l $r $p #8 #8])
(function r-addend (l r p) [mk-field $l $r $p #16 #8])

(function elf64-r-sym (l r p) (use-memo $p (`[>> (,[@fst $l]) #32]$r)))
(function elf64-r-type (l r p) (use-memo $p (`[land (,[@fst $l]) #4294967295]$r)))
(function elf64-r-info (l r p) (use-memo $p (`[+ [<< (,[@fst $l]) #32] [land (,[@frst $l]) #4294967295]]$r)))

(++ System V Application Binary Interface: AMD64 Architecture Processor Supplement)

(++ Machine Information: Processor Identification)

(function em-x86-64 (l r p) [mk& $l $r $p #62])

(++ Sections: Section Flags)

(function shf-x86-64-large (l r p) [mk& $l $r $p #268435456])

(++ Sections: Section Types)

(function sht-x86-64-unwind (l r p) [mk& $l $r $p #1879048193])

(++ Relocation: Relocation Types)

(function r-x86-64-none (l r p) [mk& $l $r $p #0])
(function r-x86-64-64 (l r p) [mk& $l $r $p #1])
(function r-x86-64-pc32 (l r p) [mk& $l $r $p #2])
(function r-x86-64-got32 (l r p) [mk& $l $r $p #3])
(function r-x86-64-plt32 (l r p) [mk& $l $r $p #4])
(function r-x86-64-copy (l r p) [mk& $l $r $p #5])
(function r-x86-64-glob-dat (l r p) [mk& $l $r $p #6])
(function r-x86-64-jump-slot (l r p) [mk& $l $r $p #7])
(function r-x86-64-relative (l r p) [mk& $l $r $p #8])
(function r-x86-64-gotpcrel (l r p) [mk& $l $r $p #9])
(function r-x86-64-32 (l r p) [mk& $l $r $p #10])
(function r-x86-64-32s (l r p) [mk& $l $r $p #11])
(function r-x86-64-16 (l r p) [mk& $l $r $p #12])
(function r-x86-64-pc16 (l r p) [mk& $l $r $p #13])
(function r-x86-64-8 (l r p) [mk& $l $r $p #14])
(function r-x86-64-pc8 (l r p) [mk& $l $r $p #15])
(function r-x86-64-dtpmod64 (l r p) [mk& $l $r $p #16])
(function r-x86-64-dtpoff64 (l r p) [mk& $l $r $p #17])
(function r-x86-64-tposs64 (l r p) [mk& $l $r $p #18])
(function r-x86-64-tlsgd (l r p) [mk& $l $r $p #19])
(function r-x86-64-tlsld (l r p) [mk& $l $r $p #20])
(function r-x86-64-dtpoff32 (l r p) [mk& $l $r $p #21])
(function r-x86-64-gottpoff (l r p) [mk& $l $r $p #22])
(function r-x86-64-tpoff32 (l r p) [mk& $l $r $p #23])
(function r-x86-64-pc64 (l r p) [mk& $l $r $p #24])
(function r-x86-64-gotoff64 (l r p) [mk& $l $r $p #25])
(function r-x86-64-gotpc32 (l r p) [mk& $l $r $p #26])
(function r-x86-64-size32 (l r p) [mk& $l $r $p #32])
(function r-x86-64-size64 (l r p) [mk& $l $r $p #33])
(function r-x86-64-gotpc32-tlsdesc (l r p) [mk& $l $r $p #34])
(function r-x86-64-tlsdesc-call (l r p) [mk& $l $r $p #35])
(function r-x86-64-tlsdesc (l r p) [mk& $l $r $p #36])
(function r-x86-64-irelative (l r p) [mk& $l $r $p #37])
(function r-x86-64-relative64 (l r p) [mk& $l $r $p #38])
(function r-x86-64-gotpcrelx (l r p) [mk& $l $r $p #41])
(function r-x86-64-rex-gotpcrelx (l r p) [mk& $l $r $p #42])
