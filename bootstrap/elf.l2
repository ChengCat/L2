(++ ELF-64 Object File Format)

(++ Data representation: ELF64 Data Types)

(function elf64-addr (l r p) (use-memo $p (` &8 $r)))
(function elf64-off (l r p) (use-memo $p (` &8 $r)))
(function elf64-half (l r p) (use-memo $p (` &2 $r)))
(function elf64-word (l r p) (use-memo $p (` &4 $r)))
(function elf64-sword (l r p) (use-memo $p (` &4 $r)))
(function elf64-xword (l r p) (use-memo $p (` &8 $r)))
(function elf64-sxword (l r p) (use-memo $p (` &8 $r)))

(++ File header: ELF-64 Header)

(function elf64-ehdr (l r p) (use-memo $p (` &64 $r)))

(function e-ident (l r p) (use-memo $p (`[+(,[fst $l])&0]$r)))

(function <e-type (l r p) (use-memo $p (`[get2b[+(,[fst $l])&16]]$r)))
(function <e-machine (l r p) (use-memo $p (`[get2b[+(,[fst $l])&18]]$r)))
(function <e-version (l r p) (use-memo $p (`[get4b[+(,[fst $l])&20]]$r)))
(function <e-entry (l r p) (use-memo $p (`[get8b[+(,[fst $l])&24]]$r)))
(function <e-phoff (l r p) (use-memo $p (`[get8b[+(,[fst $l])&32]]$r)))
(function <e-shoff (l r p) (use-memo $p (`[get8b[+(,[fst $l])&40]]$r)))
(function <e-flags (l r p) (use-memo $p (`[get4b[+(,[fst $l])&48]]$r)))
(function <e-ehsize (l r p) (use-memo $p (`[get2b[+(,[fst $l])&52]]$r)))
(function <e-phentsize (l r p) (use-memo $p (`[get2b[+(,[fst $l])&54]]$r)))
(function <e-phnum (l r p) (use-memo $p (`[get2b[+(,[fst $l])&56]]$r)))
(function <e-shentsize (l r p) (use-memo $p (`[get2b[+(,[fst $l])&58]]$r)))
(function <e-shnum (l r p) (use-memo $p (`[get2b[+(,[fst $l])&60]]$r)))
(function <e-shstrndx (l r p) (use-memo $p (`[get2b[+(,[fst $l])&62]]$r)))

(function e-type< (l r p) (use-memo $p (`[set2b[+(,[fst $l])&16](,[frst $l])]$r)))
(function e-machine< (l r p) (use-memo $p (`[set2b[+(,[fst $l])&18](,[frst $l])]$r)))
(function e-version< (l r p) (use-memo $p (`[set4b[+(,[fst $l])&20](,[frst $l])]$r)))
(function e-entry< (l r p) (use-memo $p (`[set8b[+(,[fst $l])&24](,[frst $l])]$r)))
(function e-phoff< (l r p) (use-memo $p (`[set8b[+(,[fst $l])&32](,[frst $l])]$r)))
(function e-shoff< (l r p) (use-memo $p (`[set8b[+(,[fst $l])&40](,[frst $l])]$r)))
(function e-flags< (l r p) (use-memo $p (`[set4b[+(,[fst $l])&48](,[frst $l])]$r)))
(function e-ehsize< (l r p) (use-memo $p (`[set2b[+(,[fst $l])&52](,[frst $l])]$r)))
(function e-phentsize< (l r p) (use-memo $p (`[set2b[+(,[fst $l])&54](,[frst $l])]$r)))
(function e-phnum< (l r p) (use-memo $p (`[set2b[+(,[fst $l])&56](,[frst $l])]$r)))
(function e-shentsize< (l r p) (use-memo $p (`[set2b[+(,[fst $l])&58](,[frst $l])]$r)))
(function e-shnum< (l r p) (use-memo $p (`[set2b[+(,[fst $l])&60](,[frst $l])]$r)))
(function e-shstrndx< (l r p) (use-memo $p (`[set2b[+(,[fst $l])&62](,[frst $l])]$r)))

(++ File header: ELF Identification, (e-ident))

(function <ei-mag0 (l r p) (use-memo $p (`[get1b[+(,[fst $l])&0]]$r)))
(function <ei-mag1 (l r p) (use-memo $p (`[get1b[+(,[fst $l])&1]]$r)))
(function <ei-mag2 (l r p) (use-memo $p (`[get1b[+(,[fst $l])&2]]$r)))
(function <ei-mag3 (l r p) (use-memo $p (`[get1b[+(,[fst $l])&3]]$r)))
(function <ei-class (l r p) (use-memo $p (`[get1b[+(,[fst $l])&4]]$r)))
(function <ei-data (l r p) (use-memo $p (`[get1b[+(,[fst $l])&5]]$r)))
(function <ei-version (l r p) (use-memo $p (`[get1b[+(,[fst $l])&6]]$r)))
(function <ei-osabi (l r p) (use-memo $p (`[get1b[+(,[fst $l])&7]]$r)))
(function <ei-abiversion (l r p) (use-memo $p (`[get1b[+(,[fst $l])&8]]$r)))

(function ei-mag0< (l r p) (use-memo $p (`[set1b[+(,[fst $l])&0](,[frst $l])]$r)))
(function ei-mag1< (l r p) (use-memo $p (`[set1b[+(,[fst $l])&1](,[frst $l])]$r)))
(function ei-mag2< (l r p) (use-memo $p (`[set1b[+(,[fst $l])&2](,[frst $l])]$r)))
(function ei-mag3< (l r p) (use-memo $p (`[set1b[+(,[fst $l])&3](,[frst $l])]$r)))
(function ei-class< (l r p) (use-memo $p (`[set1b[+(,[fst $l])&4](,[frst $l])]$r)))
(function ei-data< (l r p) (use-memo $p (`[set1b[+(,[fst $l])&5](,[frst $l])]$r)))
(function ei-version< (l r p) (use-memo $p (`[set1b[+(,[fst $l])&6](,[frst $l])]$r)))
(function ei-osabi< (l r p) (use-memo $p (`[set1b[+(,[fst $l])&7](,[frst $l])]$r)))
(function ei-abiversion< (l r p) (use-memo $p (`[set1b[+(,[fst $l])&8](,[frst $l])]$r)))

(function ei-pad (l r p) (use-memo $p (` &9 $r)))
(function ei-nident (l r p) (use-memo $p (` &16 $r)))

(++ File header: Object File Classes, [+ (e-ident) (ei-class)])

(function elfclass32 (l r p) (use-memo $p (` &1 $r)))
(function elfclass64 (l r p) (use-memo $p (` &2 $r)))

(++ File header: Data Encodings, [+ (e-ident) (ei-data)])

(function elfdata2lsb (l r p) (use-memo $p (` &1 $r)))
(function elfdata3msb (l r p) (use-memo $p (` &2 $r)))

(++ File header: Operating System and ABI Identifiers, [+ (e-ident) (ei-osabi)])

(function elfosabi-sysv (l r p) (use-memo $p (` &0 $r)))
(function elfosabi-hpux (l r p) (use-memo $p (` &1 $r)))
(function elfosabi-standalone (l r p) (use-memo $p (` &255 $r)))

(++ File header: Object File Types, (e-type))

(function et-none (l r p) (use-memo $p (` &0 $r)))
(function et-rel (l r p) (use-memo $p (` &1 $r)))
(function et-exec (l r p) (use-memo $p (` &2 $r)))
(function et-dyn (l r p) (use-memo $p (` &3 $r)))
(function et-core (l r p) (use-memo $p (` &4 $r)))
(function et-loos (l r p) (use-memo $p (` &65024 $r)))
(function et-hios (l r p) (use-memo $p (` &65279 $r)))
(function et-loproc (l r p) (use-memo $p (` &65280 $r)))
(function et-hiproc (l r p) (use-memo $p (` &65535 $r)))

(++ Sections: Section indicies)

(function shn-undef (l r p) (use-memo $p (` &0 $r)))
(function shn-loproc (l r p) (use-memo $p (` &65280 $r)))
(function shn-hiproc (l r p) (use-memo $p (` &65311 $r)))
(function shn-loos (l r p) (use-memo $p (` &65312 $r)))
(function shn-hios (l r p) (use-memo $p (` &65343 $r)))
(function shn-abs (l r p) (use-memo $p (` &65521 $r)))
(function shn-common (l r p) (use-memo $p (` &65522 $r)))

(++ Sections: Section header entries)

(function elf64-shdr (l r p) (use-memo $p (` &64 $r)))

(function <sh-name (l r p) (use-memo $p (`[get4b[+(,[fst $l])&0]]$r)))
(function <sh-type (l r p) (use-memo $p (`[get4b[+(,[fst $l])&4]]$r)))
(function <sh-flags (l r p) (use-memo $p (`[get8b[+(,[fst $l])&8]]$r)))
(function <sh-addr (l r p) (use-memo $p (`[get8b[+(,[fst $l])&16]]$r)))
(function <sh-offset (l r p) (use-memo $p (`[get8b[+(,[fst $l])&24]]$r)))
(function <sh-size (l r p) (use-memo $p (`[get8b[+(,[fst $l])&32]]$r)))
(function <sh-link (l r p) (use-memo $p (`[get4b[+(,[fst $l])&40]]$r)))
(function <sh-info (l r p) (use-memo $p (`[get4b[+(,[fst $l])&44]]$r)))
(function <sh-addralign (l r p) (use-memo $p (`[get8b[+(,[fst $l])&48]]$r)))
(function <sh-entsize (l r p) (use-memo $p (`[get8b[+(,[fst $l])&56]]$r)))

(function sh-name< (l r p) (use-memo $p (`[set4b[+(,[fst $l])&0](,[frst $l])]$r)))
(function sh-type< (l r p) (use-memo $p (`[set4b[+(,[fst $l])&4](,[frst $l])]$r)))
(function sh-flags< (l r p) (use-memo $p (`[set8b[+(,[fst $l])&8](,[frst $l])]$r)))
(function sh-addr< (l r p) (use-memo $p (`[set8b[+(,[fst $l])&16](,[frst $l])]$r)))
(function sh-offset< (l r p) (use-memo $p (`[set8b[+(,[fst $l])&24](,[frst $l])]$r)))
(function sh-size< (l r p) (use-memo $p (`[set8b[+(,[fst $l])&32](,[frst $l])]$r)))
(function sh-link< (l r p) (use-memo $p (`[set4b[+(,[fst $l])&40](,[frst $l])]$r)))
(function sh-info< (l r p) (use-memo $p (`[set4b[+(,[fst $l])&44](,[frst $l])]$r)))
(function sh-addralign< (l r p) (use-memo $p (`[set8b[+(,[fst $l])&48](,[frst $l])]$r)))
(function sh-entsize< (l r p) (use-memo $p (`[set8b[+(,[fst $l])&56](,[frst $l])]$r)))

(++ Sections: Section Types)

(function sht-null (l r p) (use-memo $p (` &0 $r)))
(function sht-progbits (l r p) (use-memo $p (` &1 $r)))
(function sht-symtab (l r p) (use-memo $p (` &2 $r)))
(function sht-strtab (l r p) (use-memo $p (` &3 $r)))
(function sht-rela (l r p) (use-memo $p (` &4 $r)))
(function sht-hash (l r p) (use-memo $p (` &5 $r)))
(function sht-dynamic (l r p) (use-memo $p (` &6 $r)))
(function sht-note (l r p) (use-memo $p (` &7 $r)))
(function sht-nobits (l r p) (use-memo $p (` &8 $r)))
(function sht-rel (l r p) (use-memo $p (` &9 $r)))
(function sht-shlib (l r p) (use-memo $p (` &10 $r)))
(function sht-dynsym (l r p) (use-memo $p (` &11 $r)))
(function sht-loos (l r p) (use-memo $p (` &1610612736 $r)))
(function sht-hios (l r p) (use-memo $p (` &1879048191 $r)))
(function sht-loproc (l r p) (use-memo $p (` &1879048192 $r)))
(function sht-hiproc (l r p) (use-memo $p (` &2147483647 $r)))

(++ Sections: Section Attributes, (sh_flags))

(function shf-write (l r p) (use-memo $p (` &1 $r)))
(function shf-alloc (l r p) (use-memo $p (` &2 $r)))
(function shf-execinstr (l r p) (use-memo $p (` &4 $r)))
(function shf-maskos (l r p) (use-memo $p (` &251658240 $r)))
(function shf-maskproc (l r p) (use-memo $p (` &4026531840 $r)))

(++ Symbol Table: ELF-64 Symbol Table Entry)

(function elf64-sym (l r p) (use-memo $p (` &24 $r)))

(function <st-name (l r p) (use-memo $p (`[get4b[+(,[fst $l])&0]]$r)))
(function <st-info (l r p) (use-memo $p (`[get1b[+(,[fst $l])&4]]$r)))
(function <st-other (l r p) (use-memo $p (`[get1b[+(,[fst $l])&5]]$r)))
(function <st-shndx (l r p) (use-memo $p (`[get2b[+(,[fst $l])&6]]$r)))
(function <st-value (l r p) (use-memo $p (`[get8b[+(,[fst $l])&8]]$r)))
(function <st-size (l r p) (use-memo $p (`[get8b[+(,[fst $l])&16]]$r)))

(function st-name< (l r p) (use-memo $p (`[set4b[+(,[fst $l])&0](,[frst $l])]$r)))
(function st-info< (l r p) (use-memo $p (`[set1b[+(,[fst $l])&4](,[frst $l])]$r)))
(function st-other< (l r p) (use-memo $p (`[set1b[+(,[fst $l])&5](,[frst $l])]$r)))
(function st-shndx< (l r p) (use-memo $p (`[set2b[+(,[fst $l])&6](,[frst $l])]$r)))
(function st-value< (l r p) (use-memo $p (`[set8b[+(,[fst $l])&8](,[frst $l])]$r)))
(function st-size< (l r p) (use-memo $p (`[set8b[+(,[fst $l])&16](,[frst $l])]$r)))

(++ Symbol Table: Symbol Bindings)

(function stb-local (l r p) (use-memo $p (` &0 $r)))
(function stb-global (l r p) (use-memo $p (` &1 $r)))
(function stb-weak (l r p) (use-memo $p (` &2 $r)))
(function stb-loos (l r p) (use-memo $p (` &10 $r)))
(function stb-hios (l r p) (use-memo $p (` &12 $r)))
(function stb-loproc (l r p) (use-memo $p (` &13 $r)))
(function stb-hiproc (l r p) (use-memo $p (` &15 $r)))

(function elf64-st-bind (l r p) (use-memo $p (`[>> (,[fst $l]) &4]$r)))
(function elf64-st-type (l r p) (use-memo $p (`[land (,[fst $l]) &15]$r)))
(function elf64-st-info (l r p) (use-memo $p (`[+ [<< (,[fst $l]) &4] [land (,[frst $l]) &15]]$r)))

(++ Symbol Table: Symbol Types)

(function stt-notype (l r p) (use-memo $p (` &0 $r)))
(function stt-object (l r p) (use-memo $p (` &1 $r)))
(function stt-func (l r p) (use-memo $p (` &2 $r)))
(function stt-section (l r p) (use-memo $p (` &3 $r)))
(function stt-file (l r p) (use-memo $p (` &4 $r)))
(function stt-loos (l r p) (use-memo $p (` &10 $r)))
(function stt-hios (l r p) (use-memo $p (` &12 $r)))
(function stt-loproc (l r p) (use-memo $p (` &13 $r)))
(function stt-hiproc (l r p) (use-memo $p (` &15 $r)))

(++ Relocations: ELF-64 Relocation Entries)

(function elf64-rel (l r p) (use-memo $p (` &16 $r)))
(function elf64-rela (l r p) (use-memo $p (` &24 $r)))

(function <r-offset (l r p) (use-memo $p (`[get8b[+(,[fst $l])&0]]$r)))
(function <r-info (l r p) (use-memo $p (`[get8b[+(,[fst $l])&8]]$r)))
(function <r-addend (l r p) (use-memo $p (`[get8b[+(,[fst $l])&16]]$r)))

(function r-offset< (l r p) (use-memo $p (`[set8b[+(,[fst $l])&0](,[frst $l])]$r)))
(function r-info< (l r p) (use-memo $p (`[set8b[+(,[fst $l])&8](,[frst $l])]$r)))
(function r-addend< (l r p) (use-memo $p (`[set8b[+(,[fst $l])&16](,[frst $l])]$r)))

(function elf64-r-sym (l r p) (use-memo $p (`[>> (,[fst $l]) &32]$r)))
(function elf64-r-type (l r p) (use-memo $p (`[land (,[fst $l]) &4294967295]$r)))
(function elf64-r-info (l r p) (use-memo $p (`[+ [<< (,[fst $l]) &32] [land (,[frst $l]) &4294967295]]$r)))

(++ System V Application Binary Interface: AMD64 Architecture Processor Supplement)

(++ Machine Information: Processor Identification)

(function em-x86-64 (l r p) (use-memo $p (` &62 $r)))

(++ Sections: Section Flags)

(function shf-x86-64-large (l r p) (use-memo $p (` &268435456 $r)))

(++ Sections: Section Types)

(function sht-x86-64-unwind (l r p) (use-memo $p (` &1879048193 $r)))

(++ Relocation: Relocation Types)

(function r-x86-64-none (l r p) (use-memo $p (` &0 $r)))
(function r-x86-64-64 (l r p) (use-memo $p (` &1 $r)))
(function r-x86-64-pc32 (l r p) (use-memo $p (` &2 $r)))
(function r-x86-64-got32 (l r p) (use-memo $p (` &3 $r)))
(function r-x86-64-plt32 (l r p) (use-memo $p (` &4 $r)))
(function r-x86-64-copy (l r p) (use-memo $p (` &5 $r)))
(function r-x86-64-glob-dat (l r p) (use-memo $p (` &6 $r)))
(function r-x86-64-jump-slot (l r p) (use-memo $p (` &7 $r)))
(function r-x86-64-relative (l r p) (use-memo $p (` &8 $r)))
(function r-x86-64-gotpcrel (l r p) (use-memo $p (` &9 $r)))
(function r-x86-64-32 (l r p) (use-memo $p (` &10 $r)))
(function r-x86-64-32s (l r p) (use-memo $p (` &11 $r)))
(function r-x86-64-16 (l r p) (use-memo $p (` &12 $r)))
(function r-x86-64-pc16 (l r p) (use-memo $p (` &13 $r)))
(function r-x86-64-8 (l r p) (use-memo $p (` &14 $r)))
(function r-x86-64-pc8 (l r p) (use-memo $p (` &15 $r)))
(function r-x86-64-dtpmod64 (l r p) (use-memo $p (` &16 $r)))
(function r-x86-64-dtpoff64 (l r p) (use-memo $p (` &17 $r)))
(function r-x86-64-tposs64 (l r p) (use-memo $p (` &18 $r)))
(function r-x86-64-tlsgd (l r p) (use-memo $p (` &19 $r)))
(function r-x86-64-tlsld (l r p) (use-memo $p (` &20 $r)))
(function r-x86-64-dtpoff32 (l r p) (use-memo $p (` &21 $r)))
(function r-x86-64-gottpoff (l r p) (use-memo $p (` &22 $r)))
(function r-x86-64-tpoff32 (l r p) (use-memo $p (` &23 $r)))
(function r-x86-64-pc64 (l r p) (use-memo $p (` &24 $r)))
(function r-x86-64-gotoff64 (l r p) (use-memo $p (` &25 $r)))
(function r-x86-64-gotpc32 (l r p) (use-memo $p (` &26 $r)))
(function r-x86-64-size32 (l r p) (use-memo $p (` &32 $r)))
(function r-x86-64-size64 (l r p) (use-memo $p (` &33 $r)))
(function r-x86-64-gotpc32-tlsdesc (l r p) (use-memo $p (` &34 $r)))
(function r-x86-64-tlsdesc-call (l r p) (use-memo $p (` &35 $r)))
(function r-x86-64-tlsdesc (l r p) (use-memo $p (` &36 $r)))
(function r-x86-64-irelative (l r p) (use-memo $p (` &37 $r)))
(function r-x86-64-relative64 (l r p) (use-memo $p (` &38 $r)))
(function r-x86-64-gotpcrelx (l r p) (use-memo $p (` &41 $r)))
(function r-x86-64-rex-gotpcrelx (l r p) (use-memo $p (` &42 $r)))
