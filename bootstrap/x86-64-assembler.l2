(function sh-count (l r) [mk# $l $r #7])

(function write-elf (generated-expressions symbols bin pos elfreg) (begin
	[set $pos #0]
	[set $bin [buffer-alloc $elfreg [max-elf-size $generate-expressions $symbols]]]
	(storage temp-buf [create-buffer #0])
	
	(storage ehdr [buffer-alloc $temp-buf (elf64-ehdr)])
	(setf ei-mag0 (@ e-ident $ehdr) (elfmag0))
	(setf ei-mag1 (@ e-ident $ehdr) (elfmag1))
	(setf ei-mag2 (@ e-ident $ehdr) (elfmag2))
	(setf ei-mag3 (@ e-ident $ehdr) (elfmag3))
	(setf ei-class (@ e-ident $ehdr) (elfclass64))
	(setf ei-data (@ e-ident $ehdr) (elfdata2lsb))
	(setf ei-version (@ e-ident $ehdr) #1)
	(setf ei-osabi (@ e-ident $ehdr) (elfosabi-sysv))
	(setf ei-abiversion (@ e-ident $ehdr) #0)
	
	(until (i #7) [= $i (ei-nident)] [+ $i #1] [setb (loc(& e-ident $ehdr)$i(byte)) #0])
	
	(setf e-type $ehdr (et-rel))
	(setf e-machine $ehdr (em-x86-64))
	(setf e-version $ehdr #1)
	(setf e-entry $ehdr #0)
	(setf e-phoff $ehdr #0)
	(setf e-shoff $ehdr (elf64-ehdr))
	(setf e-ehsize $ehdr (elf64-ehdr))
	(setf e-phentsize $ehdr (elf64-phdr))
	(setf e-phnum $ehdr #0)
	(setf e-shentsize $ehdr (elf64-shdr))
	(setf e-shnum $ehdr (sh-count))
	(setf e-shstrndx $ehdr #1)
	[mem-write $$bin $pos $ehdr (elf64-ehdr)]
	
	(storage strtab-len [measure-strtab $generated-expressions $symbols])
	(storage sym-count [measure-symtab $generated-expressions $symbols])
	
	(storage syms [buffer-alloc $temp-reg [* $sym-count (elf64-sym)]])
	(storage sym-ptr $syms)
	(++ Mandatory undefined symbol)
	(setf st-name $sym-ptr #0)
	(setf st-value $sym-ptr #0)
	(setf st-size $sym-ptr #0)
	(setf st-info $sym-ptr #0)
	(setf st-other $sym-ptr #0)
	(setf st-shndx $sym-ptr (shn-undef))
	[set+ sym-ptr (elf64-sym)]
	
	(storage strtab-padded-len [pad-size $strtab-len (alignment)])
	(storage strtab [buffer-alloc $temp-reg $strtab-padded-len])
	(storage strtabptr $strtab)
	[setb $strtabptr #0]
	[set+ strtabptr #1]
	
	(storage bss-ptr #0)
	
	(foreach (sym $symbols)
		(if [= (@ sym-scope $sym) (local-scope)] (begin
			(if (@ sym-name $sym)
				(begin
					[strcpy $strtabptr (@ sym-name $sym)]
					(setf st-name $sym-ptr [- $strtabptr $strtab])
					[set+ strtabptr [+[strlen(@ sym-name $sym)]#1]])
				(setf st-name $sym-ptr #0))
			
			(setf st-value $sym-ptr $bss-ptr)
			(setf sym-offset $sym $bss-ptr)
			(setf st-size $sym-ptr (@ sym-size $sym))
			(setf st-info $sym-ptr (elf64-st-info (stb-local) (stt-notype)))
			(setf st-other $sym-ptr #0)
			(setf st-shndx $sym-ptr #5)
			(setf sym-context $sym $sym-ptr)
			[set+ sym-ptr #1]
			[set+ bss-ptr [pad-size (@ sym-size $sym) (word-size)]])
			(begin)))
	
	(foreach (e $generate-expressions)
		(if (and [= (@ expr-opcode $e) (label)] [= (@ sym-scope(@ expr-symbol[@fst(@ expr-arguments $e)])) (local-scope)]) (begin
			(storage ref [@fst(@ expr-arguments $e)])
			(if (@ expr-name $ref)
				(begin
					[strcpy $strtabptr (@ expr-name $ref)]
					(setf st-name $sym-ptr [- $strtabptr $strtab])
					[set+ strtabptr [+[strlen(@ expr-name $ref)]#1]])
				(setf st-name $sym-ptr #0))
			
			(setf st-value $sym-ptr #0)
			(setf st-size $sym-ptr #0)
			(setf st-info $sym-ptr (elf64-st-info (stb-local) (stt-notype)))
			(setf st-other $sym-ptr #0)
			(setf st-shndx $sym-ptr #2)
			(setf sym-context (@ expr-symbol $ref) $sym-ptr)
			[set+ sym-ptr #1])
			(begin)))
	
	(storage local-symbol-count [- $sym-ptr $syms])
	
	(foreach (sym $symbols)
		(if (and [= (@ sym-scope $sym) (global-scope)] [= (@ sym-state $sym) (defined-state)]) (begin
			(if (@ sym-name $sym)
				(begin
					[strcpy $strtabptr (@ sym-name $sym)]
					(setf st-name $sym-ptr [- $strtabptr $strtab])
					[set+ strtabptr [+[strlen(@ sym-name $sym)]#1]])
				(setf st-name $sym-ptr #0))
			
			(setf st-value $sym-ptr $bss-ptr)
			(setf sym-offset $sym $bss-ptr)
			(setf st-size $sym-ptr (@ sym-size $sym))
			(setf st-info $sym-ptr (elf64-st-info (stb-global) (stt-notype)))
			(setf st-other $sym-ptr #0)
			(setf st-shndx $sym-ptr #5)
			(setf sym-context $sym $sym-ptr)
			[set+ sym-ptr #1]
			[set+ bss-ptr [pad-size (@ sym-size $sym) (word-size)]])
			(begin)))
	
	(foreach (sym $symbols)
		(if (and [= (@ sym-scope $sym) (global-scope)] [= (@ sym-state $sym) (undefined-state)]) (begin
			(if (@ sym-name $sym)
				(begin
					[strcpy $strtabptr (@ sym-name $sym)]
					(setf st-name $sym-ptr [- $strtabptr $strtab])
					[set+ strtabptr [+[strlen(@ sym-name $sym)]#1]])
				(setf st-name $sym-ptr #0))
			
			(setf st-value $sym-ptr #0)
			(setf st-size $sym-ptr #0)
			(setf st-info $sym-ptr (elf64-st-info (stb-global) (stt-notype)))
			(setf st-other $sym-ptr #0)
			(setf st-shndx $sym-ptr (shn-undef))
			(setf sym-context $sym $sym-ptr)
			[set+ sym-ptr #1])
			(begin)))
	
	(foreach (e $generate-expressions)
		(if (and [= (@ expr-opcode $e) (label)] [= (@ sym-scope(@ expr-symbol[@fst(@ expr-arguments $e)])) (global-scope)]) (begin
			(storage ref [@fst(@ expr-arguments $e)])
			(if (@ expr-name $ref)
				(begin
					[strcpy $strtabptr (@ expr-name $ref)]
					(setf st-name $sym-ptr [- $strtabptr $strtab])
					[set+ strtabptr [+[strlen(@ expr-name $ref)]#1]])
				(setf st-name $sym-ptr #0))
			
			(setf st-value $sym-ptr #0)
			(setf st-size $sym-ptr #0)
			(setf st-info $sym-ptr (elf64-st-info (stb-global) (stt-notype)))
			(setf st-other $sym-ptr #0)
			(setf st-shndx $sym-ptr #2)
			(setf sym-context (@ expr-symbol $ref) $sym-ptr)
			[set+ sym-ptr #1])
			(begin)))
	
	(storage text-len (begin))
	(storage max-text-sec-len [pad-size [* (max-instr-len) [length $generated-expressions]] (alignment)])
	(storage max-rela-sec-len [* (max-instr-fields) [* [length $generated-expressions] (elf64-rela)]])
	
	(storage text [buffer-alloc $temp-reg $max-text-sec-len])
	(storage relas [buffer-alloc $temp-reg $max-rela-sec-len])
	(storage rela-ptr $relas)
	[assemble $generated-expressions $text text-len $syms rela-ptr]
	
	(++ Mandatory undefined section)
	(storage undef-shdr [buffer-alloc $temp-reg (elf64-shdr)])
	(setf sh-name $undef-shdr #0)
	(setf sh-type $undef-shdr (sht-null))
	(setf sh-flags $undef-shdr #0)
	(setf sh-addr $undef-shdr #0)
	(setf sh-offset $undef-shdr #0)
	(setf sh-size $undef-shdr #0)
	(setf sh-link $undef-shdr (shn-undef))
	(setf sh-info $undef-shdr #0)
	(setf sh-addralign $undef-shdr #0)
	(setf sh-entsize $undef-shdr #0)
	[mem-write $$bin $pos $undef-shdr (elf64-shdr)]
	
	(storage shstrtab-padded-len [pad-size [strvlen(shstrtab)] (alignment)])
	(storage shstrtab-padded [buffer-alloc $temp-reg $shstrtab-padded-len])
	[memcpy $shstrtab-padded (shstrtab) [strvlen(shstrtab)]]
	
	(storage shstrtab-shdr [buffer-alloc $temp-reg (elf64-shdr)])
	(setf sh-name $shstrtab-shdr #1)
	(setf sh-type $shstrtab-shdr (sht-strtab))
	(setf sh-flags $shstrtab-shdr #0)
	(setf sh-addr $shstrtab-shdr #0)
	(setf sh-offset $shstrtab-shdr [+ (elf64-ehdr) [* (sh-count) (elf64-shdr)]])
	(setf sh-size $shstrtab-shdr [strvlen(shstrtab)])
	(setf sh-link $shstrtab-shdr (shn-undef))
	(setf sh-info $shstrtab-shdr #0)
	(setf sh-addralign $shstrtab-shdr #0)
	(setf sh-entsize $shstrtab-shdr #0)
	[mem-write $$bin $pos $shstrtab-shdr (elf64-shdr)]
	
	(storage text-shdr [buffer-alloc $temp-reg (elf64-shdr)])
	(setf sh-name $text-shdr [+ (@ sh-name $shstrtab-shdr) [+ [strlen(" .shstrtab)] #1]])
	(setf sh-type $text-shdr (sht-progbits))
	(setf sh-flags $text-shdr [lor (shf-alloc) (shf-execinstr)])
	(setf sh-addr $text-shdr #0)
	(setf sh-offset $text-shdr [+ (@ sh-offset $shstrtab-shdr) $shstrtab-padded-len])
	(setf sh-size $text-shdr $text-len)
	(setf sh-link $text-shdr (shn-undef))
	(setf sh-info $text-shdr #0)
	(setf sh-addralign $text-shdr #1)
	(setf sh-entsize $text-shdr #0)
	[mem-write $$bin $pos $text-shdr (elf64-shdr)]
	
	(storage strtab-shdr [buffer-alloc $temp-reg (elf64-shdr)])
	(setf sh-name $strtab-shdr [+ (@ sh-name $text-shdr) [+ [strlen(" .text)] #1]])
	(setf sh-type $strtab-shdr (sht-strtab))
	(setf sh-flags $strtab-shdr #0)
	(setf sh-addr $strtab-shdr #0)
	(setf sh-offset $strtab-shdr [+ (@ sh-offset $text-shdr) $max-text-sec-len])
	(setf sh-size $strtab-shdr $strtab-len)
	(setf sh-link $strtab-shdr (shn-undef))
	(setf sh-info $strtab-shdr #0)
	(setf sh-addralign $strtab-shdr #0)
	(setf sh-entsize $strtab-shdr #0)
	[mem-write $$bin $pos $strtab-shdr (elf64-shdr)]
	
	(storage symtab-shdr [buffer-alloc $temp-reg (elf64-shdr)])
	(setf sh-name $symtab-shdr [+ (@ sh-name $strtab-shdr) [+ [strlen(" .strtab)] #1]])
	(setf sh-type $symtab-shdr (sht-symtab))
	(setf sh-flags $symtab-shdr #0)
	(setf sh-addr $symtab-shdr #0)
	(setf sh-offset $symtab-shdr [+ (@ sh-offset $strtab-shdr) $strtab-padded-len])
	(setf sh-size $symtab-shdr [* $sym-count (elf64-sym)])
	(setf sh-link $symtab-shdr #3)
	(setf sh-info $symtab-shdr $local-symbol-count)
	(setf sh-addralign $symtab-shdr #0)
	(setf sh-entsize $symtab-shdr (elf64-sym))
	[mem-write $$bin $pos $symtab-shdr (elf64-shdr)]
	
	(storage bss-shdr [buffer-alloc $temp-reg (elf64-shdr)])
	(setf sh-name $bss-shdr [+ (@ sh-name $symtab-shdr) [+ [strlen(" .symtab)] #1]])
	(setf sh-type $bss-shdr (sht-nobits))
	(setf sh-flags $bss-shdr [lor (shf-write) (shf-alloc)])
	(setf sh-addr $bss-shdr #0)
	(setf sh-offset $bss-shdr [+ (@ sh-offset $symtab-shdr) (@ sh-size $symtab-shdr)])
	(setf sh-size $bss-shdr $bss-ptr)
	(setf sh-link $bss-shdr (shn-undef))
	(setf sh-info $bss-shdr #0)
	(setf sh-addralign $bss-shdr (word-size))
	(setf sh-entsize $bss-shdr #0)
	[mem-write $$bin $pos $bss-shdr (elf64-shdr)]
	
	(storage rela-shdr [buffer-alloc $temp-reg (elf64-shdr)])
	(setf sh-name $rela-shdr [+ (@ sh-name $bss-shdr) [+ [strlen(" .bss)] #1]])
	(setf sh-type $rela-shdr (sht-rela))
	(setf sh-flags $rela-shdr #0)
	(setf sh-addr $rela-shdr #0)
	(setf sh-offset $rela-shdr [+ (@ sh-offset $bss-shdr) #0])
	(setf sh-size $rela-shdr [* [- $rela-ptr $relas] (elf64-rela)])
	(setf sh-link $rela-shdr #4)
	(setf sh-info $rela-shdr #2)
	(setf sh-addralign $rela-shdr #0)
	(setf sh-entsize $rela-shdr (elf64-rela))
	[mem-write $$bin $pos $rela-shdr (elf64-shdr)]
	
	[mem-write $$bin $pos $shstrtab-padded $shdtrtab-padded-len]
	[mem-write $$bin $pos $text $max-text-sec-len]
	[mem-write $$bin $pos $strtab $strtab-padded-len]
	[mem-write $$bin $pos $syms [* $sym-count (elf64-sym)]]
	[mem-write $$bin $pos $relas [* [- $rela-ptr $relas] (elf64-rela)]]
	[destroy-buffer $temp-reg]))
