(function sys-read (l r) (` &0 $r))
(function sys-write (l r) (` &1 $r))
(function sys-open (l r) (` &2 $r))
(function sys-close (l r) (` &3 $r))
(function sys-fstat (l r) (` &5 $r))
(function sys-mmap (l r) (` &9 $r))
(function sys-munmap (l r) (` &11 $r))
(function sys-exit (l r) (` &60 $r))
(function sys-clock-gettime (l r) (` &228 $r))
(function o-rdwr (l r) (` &2 $r))
(function o-creat (l r)	(` &64 $r))
(function s-irwxu (l r) (` &448 $r))
(function s-irwxg (l r) (` &56 $r))
(function s-irwxo (l r) (` &7 $r))
(function prot-read (l r) (` &1 $r))
(function prot-write (l r) (` &2 $r))
(function prot-exec (l r) (` &4 $r))
(function prot-none (l r) (` &0 $r))
(function map-private (l r) (` &2 $r))
(function map-anonymous (l r) (` &32 $r))
(function page-size (l r) (` &4096 $r))
(function clock-process-cputime-id (l r) (` &2 $r))
(function stdin (l r) (` &0 $r))
(function stdout (l r) (` &1 $r))
(function null (l r) (` &0 $r))
(function unit (l r) (` &8 $r))
(function alloc-alignment (l r) (` &8 $r))

(function strlen (str) (with return
	{(continuation loop (i)
		(if [getb [+ $str $i]]
			{loop [+ $i &1]}
			{return $i})) &0}))

(function strrchr (s c) (with return
	(let (t [+ $s [strlen $s]]) (begin
		{(continuation loop (t)
			(if [= [getb $t] [getb c]]
				{return $t}
			(if [= $t $s]
				{return (null)}
				{loop [- $t &1]}))) $t}))))

(function strcmp (s1 s2) (with return
	{(continuation loop (s1 s2)
		(if [and [and [getb $s1] [getb $s2]] [= [getb $s1] [getb $s2]]]
			{loop [+ $s1 &1] [+ $s2 &1]}
			{return [- [getb $s1] [getb $s2]]})) $s1 $s2}))

(function strcpy (dest src) (with return
	{(continuation loop (dest src) (begin
		[setb $dest [getb $src]]
		(if [getb $dest]
			{loop [+ $dest &1] [+ $src &1]}
			{return (begin)}))) $dest $src}))

(function memcpy (dest src n) (with return
	{(continuation loop (dest src n)
		(if $n
			(begin
				[setb $dest [getb $src]]
				{loop [+ $dest &1] [+ $src &1] [- $n &1]})
			{return (begin)})) $dest $src $n}))

(function memset (s c n) (with return
	{(continuation loop (s c n)
		(if $n
			(begin
				[setb $s [getb c]]
				{loop [+ $s &1] [getb c] [- $n &1]})
			{return (begin)})) $s $c $n}))

(function isspace (c) (switch = [getb c]
	((space) (true))
	((ff) (true))
	((lf) (true))
	((cr) (true))
	((ht) (true))
	((vt) (true))
	(false)))

(function open (path) [syscall (sys-open) $path [or (o-rdwr) (o-creat)] [or (s-irwxu) [or (s-irwxg) (s-irwxo)]]])

(function write (fd d len) [syscall (sys-write) $fd $d $len])

(function write-str (fd str) [write $fd $str [strlen $str]])

(function write-char (fd ch) [write $fd ch &1])

(function write-uint (fd i) (with return
	[allocate &20 (continuation () (str) (let (j &19) (begin
		(while $i (begin
			[setb [+ $str $j] (switch = [rem $i &10]
				(&9 (char 9))
				(&8 (char 8))
				(&7 (char 7))
				(&6 (char 6))
				(&5 (char 5))
				(&4 (char 4))
				(&3 (char 3))
				(&2 (char 2))
				(&1 (char 1))
				(char 0))]
			[set j [- $j &1]]
			[set i [/ $i &10]]))
		[write $fd [+ $str [+ $j &1]] [- &19 $j]]
		{return (begin)})))]))

(function read (fd buf cnt) [syscall (sys-read) $fd $buf $cnt])

(function close (fd) [syscall (sys-close) $fd])

(function size (fd) (with return
	[allocate &144 (continuation () (statbuf) (begin
		[syscall (sys-fstat) $fd $statbuf]
		{return [get [+ $statbuf &48]]}))]))

(function mmap (len) [syscall (sys-mmap) (null) $len [or (prot-read) (prot-write)] [or (map-private) (map-anonymous)] (true) &0])

(function munmap (ptr len) [syscall (sys-munmap) $ptr $len])

(function pad-size (x nearest) [+ $x [- $nearest [rem $x $nearest]]])

(function loc (l r)
	(if [emt? [rrrst $l]]
		(`[+ (,[fst $l]) [* (,[frst $l]) (,[frrst $l])]]$r)
		[loc [lst (`($[+ (,[fst $l]) [*(,[frst $l])(unit)]])$r) [rrst $l] $r] $r]))

(function create-region (min-capacity) (with return
	(let (len [pad-size [+ $min-capacity [* &5(unit)]] (page-size)])
		(let (reg [mmap $len]) (begin
			[set (loc $reg &0(unit)) (null)]
			[set (loc $reg &1(unit)) $reg]
			[set (loc $reg &2(unit)) [+ $reg [* &5(unit)]]]
			[set (loc $reg &3(unit)) [+ $reg $len]]
			[set (loc $reg &4(unit)) &16045690984833335023]
			{return $reg})))))

(function region-alloc (reg len) (with return (begin
	[set len [pad-size $len (alloc-alignment)]]
	(if [> [+($(loc $reg &1 &2(unit)))$len] ($(loc $reg &1 &3(unit)))]
		(begin
			[set (loc $reg &1 &0(unit)) [create-region [+ $len [* &2[-($(loc $reg &1 &3(unit)))($(loc $reg &1(unit)))]]]]]
			[set (loc $reg &1(unit)) ($(loc $reg &1 &0(unit)))])
		(begin))
	[set (loc $reg &1 &2(unit)) [+($(loc $reg &1 &2(unit)))$len]]
	{return [-($(loc $reg &1 &2(unit)))$len]})))

(function destroy-region (reg) (do-while
	(let (next-reg ($(loc $reg &0(unit)))) (begin
		[munmap $reg [- ($(loc $reg &3(unit))) $reg]]
		[set reg $next-reg]))
	$reg))

(function rstrcpy (src reg) (with return
	(let (dest [region-alloc $reg [+[strlen $src]&1]]) (begin
		[strcpy $dest $src]
		{return $dest}))))

[write-str (stdout) [strrchr (" Hello.Bye.Okay) (char .)]]

[write-str (stdout) [strrchr (" Hello.Bye.Okay) (char .)]]

[write-uint (stdout) [strcmp (" HelloB) (" Hello)]]

(let (r [create-region &0]) (let (a [region-alloc $r &20]) (begin
	[write-str (stdout) [rstrcpy (" HeyYa) $r]]
	[memset $a &0 &6]
	[write-str (stdout) $a])))
