(function SYS-READ (l r) (` &0 $r))
(function SYS-WRITE (l r) (` &1 $r))
(function SYS-OPEN (l r) (` &2 $r))
(function SYS-CLOSE (l r) (` &3 $r))
(function SYS-FSTAT (l r) (` &5 $r))
(function SYS-MMAP (l r) (` &9 $r))
(function SYS-MUNMAP (l r) (` &11 $r))
(function SYS-EXIT (l r) (` &60 $r))
(function SYS-CLOCK-GETTIME (l r) (` &228 $r))
(function O-RDWR (l r) (` &2 $r))
(function O-CREAT (l r)	(` &64 $r))
(function S-IRWXU (l r) (` &448 $r))
(function S-IRWXG (l r) (` &56 $r))
(function S-IRWXO (l r) (` &7 $r))
(function PROT-READ (l r) (` &1 $r))
(function PROT-WRITE (l r) (` &2 $r))
(function PROT-EXEC (l r) (` &4 $r))
(function PROT-NONE (l r) (` &0 $r))
(function MAP-PRIVATE (l r) (` &2 $r))
(function MAP-ANONYMOUS (l r) (` &32 $r))
(function PAGE-SIZE (l r) (` &4096 $r))
(function CLOCK-PROCESS-CPUTIME-ID (l r) (` &2 $r))
(function STDIN (l r) (` &0 $r))
(function STDOUT (l r) (` &1 $r))
(function NULL (l r) (` &0 $r))
(function UNIT (l r) (` &8 $r))
(function ALLOC-ALIGNMENT (l r) (` &8 $r))

(function strlen (str) (with return
	{(continuation loop (i)
		(if [getb [+ $str $i]]
			{loop [+ $i &1]}
			{return $i})) &0}))

(function strrchr (s c) (with return
	(let (t [+ $s [strlen $s]]) (begin
		{(continuation loop (t)
			(if [= [getb $t] [getb c]]
				{return $t}
			(if [= $t $s]
				{return (NULL)}
				{loop [- $t &1]}))) $t}))))

(function strcmp (s1 s2) (with return
	{(continuation loop (s1 s2)
		(if [and [and [getb $s1] [getb $s2]] [= [getb $s1] [getb $s2]]]
			{loop [+ $s1 &1] [+ $s2 &1]}
			{return [- [getb $s1] [getb $s2]]})) $s1 $s2}))

(function strcpy (dest src) (with return
	{(continuation loop (dest src) (begin
		[setb $dest [getb $src]]
		(if [getb $dest]
			{loop [+ $dest &1] [+ $src &1]}
			{return (begin)}))) $dest $src}))

(function memcpy (dest src n) (with return
	{(continuation loop (dest src n)
		(if $n
			(begin
				[setb $dest [getb $src]]
				{loop [+ $dest &1] [+ $src &1] [- $n &1]})
			{return (begin)})) $dest $src $n}))

(function memset (s c n) (with return
	{(continuation loop (s c n)
		(if $n
			(begin
				[setb $s [getb c]]
				{loop [+ $s &1] [getb c] [- $n &1]})
			{return (begin)})) $s $c $n}))

(function isspace (c) (switch = [getb c]
	((space) (true))
	((ff) (true))
	((lf) (true))
	((cr) (true))
	((ht) (true))
	((vt) (true))
	(false)))

(function open (path) [syscall (SYS-OPEN) $path [or (O-RDWR) (O-CREAT)] [or (S-IRWXU) [or (S-IRWXG) (S-IRWXO)]]])

(function write (fd d len) [syscall (SYS-WRITE) $fd $d $len])

(function write-str (fd str) [write $fd $str [strlen $str]])

(function write-char (fd ch) [write $fd ch &1])

(function write-uint (fd i) (with return
	[allocate &20 (continuation () (str) (let (j &19) (begin
		(while $i (begin
			[setb [+ $str $j] (switch = [rem $i &10]
				(&9 (char 9))
				(&8 (char 8))
				(&7 (char 7))
				(&6 (char 6))
				(&5 (char 5))
				(&4 (char 4))
				(&3 (char 3))
				(&2 (char 2))
				(&1 (char 1))
				(char 0))]
			[set j [- $j &1]]
			[set i [/ $i &10]]))
		[write $fd [+ $str [+ $j &1]] [- &19 $j]]
		{return (begin)})))]))

(function read (fd buf cnt) [syscall (SYS-READ) $fd $buf $cnt])

(function close (fd) [syscall (SYS-CLOSE) $fd])

(function size (fd) (with return
	[allocate &144 (continuation () (statbuf) (begin
		[syscall (SYS-FSTAT) $fd $statbuf]
		{return [get [+ $statbuf &48]]}))]))

(function mmap (len) [syscall (SYS-MMAP) (NULL) $len [or (PROT-READ) (PROT-WRITE)] [or (MAP-PRIVATE) (MAP-ANONYMOUS)] (true) &0])

(function munmap (ptr len) [syscall (SYS-MUNMAP) $ptr $len])

(function pad-size (x nearest) [+ $x [- $nearest [rem $x $nearest]]])

(function loc (l r)
	(if [nil? [rrrst $l]]
		(`[+ (,[fst $l]) [* (,[frst $l]) (,[frrst $l])]]$r)
		[loc [lst (`($[+ (,[fst $l]) [*(,[frst $l])(UNIT)]])$r) [rrst $l] $r] $r]))

(function create-region (min-capacity) (with return
	(let (len [pad-size [+ $min-capacity [* &5(UNIT)]] (PAGE-SIZE)])
		(let (reg [mmap $len]) (begin
			[set (loc $reg &0(UNIT)) (NULL)]
			[set (loc $reg &1(UNIT)) $reg]
			[set (loc $reg &2(UNIT)) [+ $reg [* &5(UNIT)]]]
			[set (loc $reg &3(UNIT)) [+ $reg $len]]
			[set (loc $reg &4(UNIT)) &16045690984833335023]
			{return $reg})))))

(function region-alloc (reg len) (with return (begin
	[set len [pad-size $len (ALLOC-ALIGNMENT)]]
	(if [> [+($(loc $reg &1 &2(UNIT)))$len] ($(loc $reg &1 &3(UNIT)))]
		(begin
			[set (loc $reg &1 &0(UNIT)) [create-region [+ $len [* &2[-($(loc $reg &1 &3(UNIT)))($(loc $reg &1(UNIT)))]]]]]
			[set (loc $reg &1(UNIT)) ($(loc $reg &1 &0(UNIT)))])
		(begin))
	[set (loc $reg &1 &2(UNIT)) [+($(loc $reg &1 &2(UNIT)))$len]]
	{return [-($(loc $reg &1 &2(UNIT)))$len]})))

(function destroy-region (reg) (do-while
	(let (next-reg ($(loc $reg &0(UNIT)))) (begin
		[munmap $reg [- ($(loc $reg &3(UNIT))) $reg]]
		[set reg $next-reg]))
	$reg))

(function rstrcpy (src reg) (with return
	(let (dest [region-alloc $reg [+[strlen $src]&1]]) (begin
		[strcpy $dest $src]
		{return $dest}))))

[write-str (STDOUT) [strrchr (" Hello.Bye.Okay) (char .)]]

[write-str (STDOUT) [strrchr (" Hello.Bye.Okay) (char .)]]

[write-uint (STDOUT) [strcmp (" HelloB) (" Hello)]]

(let (r [create-region &0]) (let (a [region-alloc $r &20]) (begin
	[write-str (STDOUT) [rstrcpy (" HeyYa) $r]]
	[memset $a &0 &6]
	[write-str (STDOUT) $a])))
