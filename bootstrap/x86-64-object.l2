(function object (l r) (`[* #6(unit)]$r))
(function obj-ehdr (l r) [mk-field $l $r #0 #8])
(function obj-shdrs (l r) [mk-field $l $r #8 #8])
(function obj-syms (l r) [mk-field $l $r #16 #8])
(function obj-relas (l r) [mk-field $l $r #24 #8])
(function obj-addends (l r) [mk-field $l $r #32 #8])
(function obj-segs (l r) [mk-field $l $r #40 #8])

(function do-relocations (obj handler) (until (sec-idx #0) [= $sec-idx (@ e-shnum(@ obj-ehdr $obj))] [+ $sec-idx #1]
	(let (shdr-buf (loc (@ obj-shdrs $obj) $sec-idx (elf64-shdr)))
		(if (or [= (@ sh-type $shdr-buf) (sht-rela)] [= (@ sh-type $shdr-buf) (sht-rel)])
			(let (relanum [/ (@ sh-size $shdr-buf) (@ sh-entsize $shdr-buf)]) (relas-buf ($(loc (@ obj-relas $obj) $sec-idx (unit))))
					(addends-buf ($(loc (@ obj-addends $obj) $sec-idx (unit))))
				(until (rela-idx #0) [= $rela-idx $relanum] [+ $rela-idx #1]
					(let (syms-buf ($(loc (@ obj-syms $obj) (@ sh-link $shdr-buf) (unit))))
							(rela (loc $relas-buf $rela-idx (elf64-rela))) (addend ($(loc $addends-buf $rela-idx (elf64-sxword))))
							(let (sym (loc $syms-buf (elf64-r-sym (@ r-info $rela)) (elf64-sym)))
						(switch = (elf64-r-type (@ r-info $rela))
							((r-x86-64-none) (begin))
							((r-x86-64-64) [memcpy (@ r-offset $rela) (storage _[+(@ st-value $sym)$addend]) #8])
							((r-x86-64-pc32) [memcpy (@ r-offset $rela) (storage _[-[+(@ st-value $sym)$addend](@ r-offset $rela)]) #4])
							((r-x86-64-glob-dat) [memcpy (@ r-offset $rela) (storage _(@ st-value $sym)) #8])
							((r-x86-64-jump-slot) [memcpy (@ r-offset $rela) (storage _(@ st-value $sym)) #8])
							((r-x86-64-32) [memcpy (@ r-offset $rela) (storage _[+(@ st-value $sym) $addend]) #4])
							((r-x86-64-32s) [memcpy (@ r-offset $rela) (storage _[+(@ st-value $sym) $addend]) #4])
							((r-x86-64-16) [memcpy (@ r-offset $rela) (storage _[+(@ st-value $sym) $addend]) #2])
							((r-x86-64-pc16) [memcpy (@ r-offset $rela) (storage _[-[+(@ st-value $sym)$addend](@ r-offset $rela)])#2])
							((r-x86-64-8) [memcpy (@ r-offset $rela) (storage _[+(@ st-value $sym)$addend]) #1])
							((r-x86-64-pc8) [memcpy (@ r-offset $rela) (storage _[-[+(@ st-value $sym)$addend](@ r-offset $rela)])#1])
							((r-x86-64-size32) [memcpy (@ r-offset $rela) (storage _[+(@ st-size $sym)$addend]) #4])
							((r-x86-64-size64) [memcpy (@ r-offset $rela) (storage _[+(@ st-size $sym)$addend]) #8])
							{$handler})))))
			(begin)))))

(function store-addends (obj reg handler)
	(until (sec-idx #0) [= $sec-idx (@ e-shnum(@ obj-ehdr $obj))] [+ $sec-idx #1]
		(let (shdr-buf (loc (@ obj-shdrs $obj) $sec-idx (elf64-shdr)))
			(if [= (@ sh-type $shdr-buf) (sht-rela)]
				(let (relanum [/ (@ sh-size $shdr-buf) (@ sh-entsize $shdr-buf)])
						(relas-buf ($(loc (@ obj-relas $obj) $sec-idx (unit))))
						(addends-buf (loc (@ obj-addends $obj) $sec-idx (unit))) (begin
					[set $addends-buf [buffer-alloc $reg [* $relanum (elf64-sxword)]]]
					(until (rela-idx #0) [= $rela-idx $relanum] [+ $rela-idx #1]
						(let (rela (loc $relas-buf $rela-idx (elf64-rela)))
							[set8b (loc $$addends-buf $rela-idx (elf64-sxword)) (@ r-addend $rela)]))))
			(if [= (@ sh-type $shdr-buf) (sht-rel)]
				(let (relanum [/ (@ sh-size $shdr-buf) (@ sh-entsize $shdr-buf)])
						(relas-buf ($(loc (@ obj-relas $obj) $sec-idx (unit))))
						(addends-buf (loc (@ obj-addends $obj) $sec-idx (unit))) (begin
					[set $addends-buf [buffer-alloc $reg [* $relanum (elf64-sxword)]]]
					(until (rela-idx #0) [= $rela-idx $relanum] [+ $rela-idx #1]
						(let (rela (loc $relas-buf $rela-idx (elf64-rela)))
							[(switch = (elf64-r-type (@ r-info $rela))
									((r-x86-64-8) set1b) ((r-x86-64-pc8) set1b) ((r-x86-64-16) set2b) ((r-x86-64-pc16) set2b)
									((r-x86-64-pc32) set4b) ((r-x86-64-32) set4b) ((r-x86-64-32s) set4b) ((r-x86-64-size32) set4b)
									((r-x86-64-64) set8b) ((r-x86-64-size64) set8b) ((r-x86-64-glob-dat) set8b)
									((r-x86-64-jump-slot) set8b) {$handler})
								(loc $$addends-buf $rela-idx (elf64-sxword)) (@ r-offset $rela)]))))
			(begin))))))

(function offsets-to-addresses (obj)
	(until (sec-idx #0) [= $sec-idx (@ e-shnum(@ obj-ehdr $obj))] [+ $sec-idx #1]
		(let (shdr-buf (loc (@ obj-shdrs $obj) $sec-idx (elf64-shdr)))
			(if (or [= (@ sh-type $shdr-buf) (sht-rela)] [= (@ sh-type $shdr-buf) (sht-rel)])
				(let (relanum [/ (@ sh-size $shdr-buf) (@ sh-entsize $shdr-buf)])
						(relas-buf ($(loc (@ obj-relas $obj) $sec-idx (unit))))
					(until (rela-idx #0) [= $rela-idx $relanum] [+ $rela-idx #1]
						(let (rela (loc $relas-buf $rela-idx (elf64-rela)))
								(target-seg-addr ($(loc (@ obj-segs $obj) (@ sh-info $shdr-buf) (unit))))
							(setf r-offset $rela [+ $target-seg-addr (@ r-offset $rela)]))))
			(if [= (@ sh-type $shdr-buf) (sht-symtab)]
				(let (symnum [/ (@ sh-size $shdr-buf) (@ sh-entsize $shdr-buf)]) (syms-buf ($(loc (@ obj-syms $obj) $sec-idx (unit))))
					(until (sym-idx #0) [= $sym-idx $symnum] [+ $sym-idx #1]
						(let (sym (loc $syms-buf $sym-idx (elf64-sym)))
							(setf st-value $sym (switch = (@ st-shndx $sym)
								((shn-abs) (@ st-value $sym))
								((shn-common) #0)
								((shn-undef) #0)
								(let (base-seg-addr ($(loc (@ obj-segs $obj) (@ st-shndx $sym) (unit))))
									[+ $base-seg-addr (@ st-value $sym)]))))))
			(begin))))))

(function read-object (objsrc objsrc-sz reg handler) (with return
	(let (obj [buffer-alloc $reg (object)]) (begin
		(setf obj-ehdr $obj [buffer-alloc $reg (elf64-ehdr)])
		[memcpy (@ obj-ehdr $obj) $objsrc (elf64-ehdr)]
		(setf obj-shdrs $obj [buffer-alloc $reg [* (@ e-shnum(@ obj-ehdr $obj)) (elf64-shdr)]])
		(setf obj-syms $obj [buffer-alloc $reg [* (@ e-shnum(@ obj-ehdr $obj)) (unit)]])
		(setf obj-relas $obj [buffer-alloc $reg [* (@ e-shnum(@ obj-ehdr $obj)) (unit)]])
		(setf obj-addends $obj [buffer-alloc $reg [* (@ e-shnum(@ obj-ehdr $obj)) (unit)]])
		(setf obj-segs $obj [buffer-alloc $reg [* (@ e-shnum(@ obj-ehdr $obj)) (unit)]])
		
		(until (sec-idx #0) [= $sec-idx (@ e-shnum(@ obj-ehdr $obj))] [+ $sec-idx #1]
			(let (shdr-buf (loc (@ obj-shdrs $obj) $sec-idx (elf64-shdr))) (seg-buf (loc (@ obj-segs $obj) $sec-idx (unit))) (begin
				[memcpy $shdr-buf [+ $objsrc (loc (@ e-shoff(@ obj-ehdr $obj)) $sec-idx (@ e-shentsize(@ obj-ehdr $obj)))] (elf64-shdr)]
				[set $seg-buf [buffer-alloc $reg (@ sh-size $shdr-buf)]]
				(if [= (@ sh-type $shdr-buf) (sht-nobits)] (begin)
					[memcpy $$seg-buf [+ $objsrc (@ sh-offset $shdr-buf)] (@ sh-size $shdr-buf)])
				(if [= (@ sh-type $shdr-buf) (sht-symtab)]
					(let (symnum [/ (@ sh-size $shdr-buf) (@ sh-entsize $shdr-buf)]) (syms-buf (loc (@ obj-syms $obj) $sec-idx (unit)))
						(begin
						(++ Following code copies recognized information from the symbol table into (@ obj-syms $obj))
						[set $syms-buf [buffer-alloc $reg [* $symnum (elf64-sym)]]]
						(until (sym-idx #0) [= $sym-idx $symnum] [+ $sym-idx #1]
							[memcpy (loc $$syms-buf $sym-idx (elf64-sym)) (loc $$seg-buf $sym-idx (@ sh-entsize $shdr-buf))
								(elf64-sym)])))
				(if (or [= (@ sh-type $shdr-buf) (sht-rela)] [= (@ sh-type $shdr-buf) (sht-rel)])
					(let (relanum [/ (@ sh-size $shdr-buf) (@ sh-entsize $shdr-buf)])
							(relas-buf (loc (@ obj-relas $obj) $sec-idx (unit)))
						(begin
						(++ Following code copies recognized information from the relocations into (@ obj-relas $obj))
						[set $relas-buf [buffer-alloc $reg [* $relanum (elf64-rela)]]]
						(until (rela-idx #0) [= $rela-idx $relanum] [+ $rela-idx #1]
							[memcpy (loc $$relas-buf $rela-idx (elf64-rela)) (loc $$seg-buf $rela-idx (@ sh-entsize $shdr-buf))
								(if [= (@ sh-type $shdr-buf) (sht-rela)] (elf64-rela) (elf64-rel))])))
				(begin))))))
		{return $obj}))))

(function load (objsrc objsrc-sz reg handler) (with return
	(let (obj [read-object $objsrc $objsrc-sz $reg $handler]) (begin
			[offsets-to-addresses $obj]
			[store-addends $obj $reg $handler]
			[do-relocations $obj $handler]
			{return $obj}))))

(function name-of (obj shdr sym)
	(let (seg-buf ($(loc (@ obj-segs $obj) (@ sh-link $shdr) (unit))))
		[+ $seg-buf (@ st-name $sym)]))

(function object-symbol (l r) (`[* #2(unit)]$r))

(function make-object-symbol (name address reg) (with return
	(let (sym [buffer-alloc $reg (object-symbol)]) (begin
		(setf sym-name $sym $name)
		(setf sym-offset $sym $address)
		{return $sym}))))

(function mutate-symbols (obj updates) (begin
	(foreach (update $updates)
		(until (sec-idx #0) [= $sec-idx (@ e-shnum(@ obj-ehdr $obj))] [+ $sec-idx #1]
			(let (shdr-buf (loc (@ obj-shdrs $obj) $sec-idx (elf64-shdr)))
				(if [= (@ sh-type $shdr-buf) (sht-symtab)]
					(let (symnum [/ (@ sh-size $shdr-buf) (@ sh-entsize $shdr-buf)])
							(syms-buf ($(loc (@ obj-syms $obj) $sec-idx (unit))))
						(until (sym-idx #1) [= $sym-idx $symnum] [+ $sym-idx #1]
							(let (sym (loc $syms-buf $sym-idx (elf64-sym)))
								(if (and (not [strcmp [name-of $obj $shdr-buf $sym] (@ sym-name $update)])
										(or [= (@ st-shndx $sym) (shn-undef)] [= (@ st-shndx $sym) (shn-common)])
										(or [= (elf64-st-bind (@ st-info $sym)) (stb-global)]
											[= (elf64-st-bind (@ st-info $sym)) (stb-weak)]))
									(setf st-value $sym (@ sym-offset $update))
									(begin)))))
					(begin)))))
	(++ If $obj was created using load, the following invocation cannot produce an error; hence the (null) handler argument.)
	[do-relocations $obj (null)]))

(function symbols (flag obj reg) (with return
	(let (syms nil) (begin
		(until (sec-idx #0) [= $sec-idx (@ e-shnum(@ obj-ehdr $obj))] [+ $sec-idx #1]
			(let (shdr-buf (loc (@ obj-shdrs $obj) $sec-idx (elf64-shdr)))
				(if [= (@ sh-type $shdr-buf) (sht-symtab)]
					(let (symnum [/ (@ sh-size $shdr-buf) (@ sh-entsize $shdr-buf)])
							(syms-buf ($(loc (@ obj-syms $obj) $sec-idx (unit))))
						(until (sym-idx #1) [= $sym-idx $symnum] [+ $sym-idx #1]
							(let (sym (loc $syms-buf $sym-idx (elf64-sym)))
								(if (and [= (or [= (@ st-shndx $sym) (shn-undef)] [= (@ st-shndx $sym) (shn-common)]) $flag]
										(or [= (elf64-st-bind (@ st-info $sym)) (stb-global)]
											[= (elf64-st-bind (@ st-info $sym)) (stb-weak)]))
									[prepend [make-object-symbol [name-of $obj $shdr-buf $sym] (@ st-value $sym) $reg] syms $reg]
									(begin)))))
				(begin))))
		{return $syms}))))

(function mutable-symbols (obj reg) [symbols #1 $obj $reg])

(function immutable-symbols (obj reg) [symbols #0 $obj $reg])

(function segment (obj name)
	(if [= (@ e-shstrndx(@ obj-ehdr $obj)) (shn-undef)] (begin)
		(with return
			(let (shstrseg-buf ($(loc (@ obj-segs $obj) (@ e-shstrndx(@ obj-ehdr $obj)) (unit))))
				(until (sec-idx #0) [= $sec-idx (@ e-shnum(@ obj-ehdr $obj))] [+ $sec-idx #1]
					(let (shdr-buf (loc (@ obj-shdrs $obj) $sec-idx (elf64-shdr)))
						(if [strcmp (loc $shstrseg-buf (@ sh-name $shdr-buf) #1) $name] (begin)
							{return ($(loc (@ obj-segs $obj) $sec-idx (unit)))})))))))

(let (f [open (" ../bin/x86_64.o)]) (reg [create-buffer #0])
	(let (buf [buffer-alloc $reg [size $f]]) (begin
		[read $f $buf [size $f]]
		(let (obj [load $buf [size $f] $reg (null)]) (begin
			(foreach (j [immutable-symbols $obj $reg])
				(if (not [strcmp (@ sym-name $j) (" syscall)])
					(let (hdl (@ sym-offset $j))
						[$hdl (sys-write) (stdout) (" Hellopeople) #6])
					(begin [mutate-symbols $obj nil])))
			[[segment $obj (" .text)]])))))

