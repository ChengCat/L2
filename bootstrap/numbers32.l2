(** Turns a 4-byte integer into base-2 s-expression representation of it.
(function binary->base2sexpr (binary)
	[lst [lllllllst [-l-][-i-][-t-][-e-][-r-][-a-][-l-][nil]] [lst (with return
		{(continuation write (count in out)
			(if $count
				{write [- $count (literal 00000000000000000000000000000001)]
					[>> $in (literal 00000000000000000000000000000001)]
					[lst (if [and $in (literal 00000000000000000000000000000001)] [-1-] [-0-]) $out]}
				{return $out})) (literal 00000000000000000000000000100000) $binary [nil]}) [nil]]]))

(function & (l)
	[binary->base2sexpr
		(** Turns the base-10 s-expression input into a 4-byte integer.
			(with return {(continuation read (in out)
				(if [nil? $in]
					{return $out}
					{read [rst $in] [+ [* $out (literal 00000000000000000000000000001010)]
						(if [sexpr= [-9-] [fst $in]] (literal 00000000000000000000000000001001)
						(if [sexpr= [-8-] [fst $in]] (literal 00000000000000000000000000001000)
						(if [sexpr= [-7-] [fst $in]] (literal 00000000000000000000000000000111)
						(if [sexpr= [-6-] [fst $in]] (literal 00000000000000000000000000000110)
						(if [sexpr= [-5-] [fst $in]] (literal 00000000000000000000000000000101)
						(if [sexpr= [-4-] [fst $in]] (literal 00000000000000000000000000000100)
						(if [sexpr= [-3-] [fst $in]] (literal 00000000000000000000000000000011)
						(if [sexpr= [-2-] [fst $in]] (literal 00000000000000000000000000000010)
						(if [sexpr= [-1-] [fst $in]] (literal 00000000000000000000000000000001)
							(literal 00000000000000000000000000000000))))))))))]}))
				[fst $l] (literal 00000000000000000000000000000000)}))])
