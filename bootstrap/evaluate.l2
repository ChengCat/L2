(function compile-program (program symbols expr-buf handler err) (with return (begin
	[visit-expressions vfind-multiple-definitions program (storage _ $handler $err)]
	[classify-program-symbols (@ expr-expression $program)]
	[visit-expressions vlink-references (& expr-expression $program) (storage _ $expr-buf $handler $err)]
	[visit-expressions vescape-analysis program (null)]
	[set program [use-return-symbol $program (null) $expr-buf]]
	[classify-program-symbols (@ expr-expression $program)]
	[visit-expressions vlayout-frames (& expr-expression $program) $expr-buf]
	[visit-expressions vgenerate-references program $expr-buf]
	[visit-expressions vgenerate-continuation-expressions program $expr-buf]
	[visit-expressions vgenerate-literals program $expr-buf]
	[visit-expressions vgenerate-ifs program $expr-buf]
	[visit-expressions vgenerate-function-expressions program $expr-buf]
	[visit-expressions vgenerate-storage-expressions program $expr-buf]
	[set $symbols (@ expr-symbols $program)]
	(foreach (l (@ expr-parameters $program)) [prepend (@ expr-symbol $l) $symbols $expr-buf])
	[set program [generate-toplevel $program $expr-buf]]
	(storage asms nil)
	[visit-expressions vlinearized-expressions program (storage _ asms $expr-buf)]
	{return [reverse $asms $expr-buf]})))

(function load-program (program expr-buf obj-buf handler err) (with return (begin
	(storage symbols (begin))
	(storage asms [compile-program $program symbols $expr-buf $handler $err])
	(storage objdest (begin))
	(storage objdest-sz (begin))
	[write-elf $asms $symbols objdest objdest-sz $obj-buf]
	(storage obj [load $objdest $objdest-sz $obj-buf $handler $err])
	[symbol-offsets-to-addresses $asms $symbols $obj]
	{return $obj})))

(function load-program-and-mutate (program syms expr-buf obj-buf handler err) (with return (begin
	(storage obj [load-program $program $expr-buf $obj-buf $handler $err])
	(storage temp-reg [create-buffer #0])
	(storage ms [mutable-symbols $obj $temp-reg])
	(storage missing-sym [not-subset (function symbol= (sym1 sym2) [str= (@ sym-name $sym1) (@ sym-name $sym2)]) $ms $syms])
	(if $missing-sym {$handler (set-storage $err undefined-reference-error (@ sym-name $missing-sym))} (begin))
	[destroy-buffer $temp-reg]
	[mutate-symbols $obj $syms]
	{return $obj})))
	
(function read-to-buffer (fn expr-buf size-out handler err) (with return (begin
	(storage fd (begin))
	(storage src-buf (begin))
	
	(fallthrough
		(begin
			[set fd [open $fn $handler $err]]
			[set $size-out [size $fd close-file $err]]
			[set src-buf [buffer-alloc $expr-buf $$size-out]]
			[read $fd $src-buf $$size-out close-file $err])
			
		(close-file (begin
			[close $fd $handler $err]
			(if [= (@0 $err) no-error] {return $src-buf} {$handler (begin)})))))))
			
(function read-expressions (fn expr-buf handler err) (with return (begin
	(storage src-sz (begin))
	(storage src-buf [read-to-buffer $fn $expr-buf src-sz $handler $err])
	(storage expressions nil)
	(storage pos #0)
	
	(while [after-leading-space $src-buf $src-sz pos]
		[append [build-expression [build-fragment $src-buf $src-sz pos $expr-buf $handler $err] $expr-buf $handler $err]
			expressions $expr-buf])
	
	{return $expressions})))

(storage unsupported-ext-error (begin))

(function evaluate-files (srcv symbols expr-buf obj-buf handler err) (begin
	(storage objects nil)
	
	(foreach (src $srcv) (begin
		(storage obj (begin))
		(storage dot [strrchr $src (char .)])

		(if (and $dot [str= $dot (" .l2)])
			[set obj [load-program [generate-metaprogram [make-program [read-expressions $src $expr-buf $handler $err]
				$expr-buf] $symbols $expr-buf $obj-buf $handler $err] $expr-buf $obj-buf $handler $err]]
	
		(if (and $dot [str= $dot (" .o)]) (begin
			(storage obj-sz (begin))
			(storage buf [read-to-buffer $src $obj-buf obj-sz $handler $err])
			[set obj [load $buf $obj-sz $obj-buf $handler $err]])
	
			{$handler (set-storage $err unsupported-ext-error $src)}))

		[append $obj objects $obj-buf]
		[append-list $symbols [immutable-symbols $obj $obj-buf]]))

	(foreach (obj $objects) [mutate-symbols $obj $$symbols])
	(foreach (obj $objects) [[segment $obj (" .text)]])))

(function compile-files (programs syms expr-buf obj-buf handler err)
	(foreach (infn $programs) (begin
		(storage dot [strrchr $infn (char .)])
		(if (and $dot [str= $dot (" .l2)]) (begin
			(storage program [make-program [read-expressions $infn $expr-buf $handler $err] $expr-buf])
			[pre-visit-expressions vgenerate-metas program (storage _ $syms $expr-buf $handler $err)]
			(storage symbols (begin))
			(storage asms [compile-program $program symbols $expr-buf $handler $err])
			(storage objdest (begin))
			(storage objdest-sz (begin))
			[write-elf $asms $symbols objdest objdest-sz $obj-buf]
			(storage outfn [buffer-alloc $obj-buf [+ [strlen $infn] #1]])
			[strcpy $outfn $infn]
			[strcpy [strrchr $outfn (char .)] (" .o2)]
			(storage fd [create $outfn $handler $err])
			[print $fd $objdest $objdest-sz]
			[close $fd])
			(begin)))))

(storage arguments-error (begin))

(storage no-error (begin))

(storage err no-error (begin) (begin) (begin) (begin))

(let (obj-buf (begin)) (expr-buf (begin))
	(fallthrough
		(begin
			[set obj-buf [create-buffer #0]]
			[set expr-buf [create-buffer #0]]
			
			(storage args [@cdr[argv $obj-buf]])
			(storage dash-list [find str= args (" -)])
			(if $dash-list (begin) {handler (set-storage $err arguments-error)})
			
			(storage metaprograms nil)
			(with break (foreach (fn $args)
				(if [str= $fn (" -)]
					{break (begin)}
					[append $fn metaprograms $obj-buf])))
			
			(storage programs nil)
			(foreach (fn [@cdr $$dash-list]) [append $fn programs $obj-buf])
			
			(storage syms (list
				[make-sym (" -!-)(sym-char(char !)) $obj-buf]
				[make-sym (" -!-)(sym-char(char !)) $obj-buf]
				[make-sym (" -"-)(sym-char(char ")) $obj-buf]
				[make-sym (" -#-)(sym-char(char #)) $obj-buf]
				[make-sym (" -$-)(sym-char(char $)) $obj-buf]
				[make-sym (" -%-)(sym-char(char %)) $obj-buf]
				[make-sym (" -&-)(sym-char(char &)) $obj-buf]
				[make-sym (" -'-)(sym-char(char ')) $obj-buf]
				[make-sym (" -*-)(sym-char(char *)) $obj-buf]
				[make-sym (" -+-)(sym-char(char +)) $obj-buf]
				[make-sym (" -,-)(sym-char(char ,)) $obj-buf]
				[make-sym (" ---)(sym-char(char -)) $obj-buf]
				[make-sym (" -.-)(sym-char(char .)) $obj-buf]
				[make-sym (" -/-)(sym-char(char /)) $obj-buf]
				[make-sym (" -0-)(sym-char(char 0)) $obj-buf]
				[make-sym (" -1-)(sym-char(char 1)) $obj-buf]
				[make-sym (" -2-)(sym-char(char 2)) $obj-buf]
				[make-sym (" -3-)(sym-char(char 3)) $obj-buf]
				[make-sym (" -4-)(sym-char(char 4)) $obj-buf]
				[make-sym (" -5-)(sym-char(char 5)) $obj-buf]
				[make-sym (" -6-)(sym-char(char 6)) $obj-buf]
				[make-sym (" -7-)(sym-char(char 7)) $obj-buf]
				[make-sym (" -8-)(sym-char(char 8)) $obj-buf]
				[make-sym (" -9-)(sym-char(char 9)) $obj-buf]
				[make-sym (" -:-)(sym-char(char :)) $obj-buf]
				[make-sym (" -;-)(sym-char(char ;)) $obj-buf]
				[make-sym (" -<-)(sym-char(char <)) $obj-buf]
				[make-sym (" -=-)(sym-char(char =)) $obj-buf]
				[make-sym (" ->-)(sym-char(char >)) $obj-buf]
				[make-sym (" -?-)(sym-char(char ?)) $obj-buf]
				[make-sym (" -@-)(sym-char(char @)) $obj-buf]
				[make-sym (" -A-)(sym-char(char A)) $obj-buf]
				[make-sym (" -B-)(sym-char(char B)) $obj-buf]
				[make-sym (" -C-)(sym-char(char C)) $obj-buf]
				[make-sym (" -D-)(sym-char(char D)) $obj-buf]
				[make-sym (" -E-)(sym-char(char E)) $obj-buf]
				[make-sym (" -F-)(sym-char(char F)) $obj-buf]
				[make-sym (" -G-)(sym-char(char G)) $obj-buf]
				[make-sym (" -H-)(sym-char(char H)) $obj-buf]
				[make-sym (" -I-)(sym-char(char I)) $obj-buf]
				[make-sym (" -J-)(sym-char(char J)) $obj-buf]
				[make-sym (" -K-)(sym-char(char K)) $obj-buf]
				[make-sym (" -L-)(sym-char(char L)) $obj-buf]
				[make-sym (" -M-)(sym-char(char M)) $obj-buf]
				[make-sym (" -N-)(sym-char(char N)) $obj-buf]
				[make-sym (" -O-)(sym-char(char O)) $obj-buf]
				[make-sym (" -P-)(sym-char(char P)) $obj-buf]
				[make-sym (" -Q-)(sym-char(char Q)) $obj-buf]
				[make-sym (" -R-)(sym-char(char R)) $obj-buf]
				[make-sym (" -S-)(sym-char(char S)) $obj-buf]
				[make-sym (" -T-)(sym-char(char T)) $obj-buf]
				[make-sym (" -U-)(sym-char(char U)) $obj-buf]
				[make-sym (" -V-)(sym-char(char V)) $obj-buf]
				[make-sym (" -W-)(sym-char(char W)) $obj-buf]
				[make-sym (" -X-)(sym-char(char X)) $obj-buf]
				[make-sym (" -Y-)(sym-char(char Y)) $obj-buf]
				[make-sym (" -Z-)(sym-char(char Z)) $obj-buf]
				[make-sym (" -\-)(sym-char(char \)) $obj-buf]
				[make-sym (" -^-)(sym-char(char ^)) $obj-buf]
				[make-sym (" -_-)(sym-char(char _)) $obj-buf]
				[make-sym (" -`-)(sym-char(char `)) $obj-buf]
				[make-sym (" -a-)(sym-char(char a)) $obj-buf]
				[make-sym (" -b-)(sym-char(char b)) $obj-buf]
				[make-sym (" -c-)(sym-char(char c)) $obj-buf]
				[make-sym (" -d-)(sym-char(char d)) $obj-buf]
				[make-sym (" -e-)(sym-char(char e)) $obj-buf]
				[make-sym (" -f-)(sym-char(char f)) $obj-buf]
				[make-sym (" -g-)(sym-char(char g)) $obj-buf]
				[make-sym (" -h-)(sym-char(char h)) $obj-buf]
				[make-sym (" -i-)(sym-char(char i)) $obj-buf]
				[make-sym (" -j-)(sym-char(char j)) $obj-buf]
				[make-sym (" -k-)(sym-char(char k)) $obj-buf]
				[make-sym (" -l-)(sym-char(char l)) $obj-buf]
				[make-sym (" -m-)(sym-char(char m)) $obj-buf]
				[make-sym (" -n-)(sym-char(char n)) $obj-buf]
				[make-sym (" -o-)(sym-char(char o)) $obj-buf]
				[make-sym (" -p-)(sym-char(char p)) $obj-buf]
				[make-sym (" -q-)(sym-char(char q)) $obj-buf]
				[make-sym (" -r-)(sym-char(char r)) $obj-buf]
				[make-sym (" -s-)(sym-char(char s)) $obj-buf]
				[make-sym (" -t-)(sym-char(char t)) $obj-buf]
				[make-sym (" -u-)(sym-char(char u)) $obj-buf]
				[make-sym (" -v-)(sym-char(char v)) $obj-buf]
				[make-sym (" -w-)(sym-char(char w)) $obj-buf]
				[make-sym (" -x-)(sym-char(char x)) $obj-buf]
				[make-sym (" -y-)(sym-char(char y)) $obj-buf]
				[make-sym (" -z-)(sym-char(char z)) $obj-buf]
				[make-sym (" -|-)(sym-char(char |)) $obj-buf]
				[make-sym (" -~-)(sym-char(char ~)) $obj-buf]
				[make-sym (" @fst) @car $obj-buf]
				[make-sym (" @rst) @cdr $obj-buf]
				[make-sym (" lst) cons $obj-buf]
				[make-sym (" symbol?) i/f:symbol? $obj-buf]
				[make-sym (" emt?) nil? $obj-buf]
				[make-sym (" emt) nil $obj-buf]
				[make-sym (" char=) i/f:char= $obj-buf] $obj-buf))
			
			[evaluate-files $metaprograms syms $expr-buf $obj-buf handler err]
			[compile-files $programs $syms $expr-buf $obj-buf handler err])
			
		(handler
			(switch = (@0 err)
				(multiple-definition-error (begin
					[print-str (stdout) (" The definition of(space)) cleanup err]
					[print-str (stdout) (@1 err) cleanup err]
					[print-str (stdout) (" (space)erroneously occured multiple times.(lf)) cleanup err]))
					
				(param-count-mismatch-error (begin
					[print-str (stdout) (" The number of arguments in(space)) cleanup err]
					[print-expression (@1 err) cleanup err]
					[print-str (stdout) (" (space)does not match the number of parameters in(space)) cleanup err]
					[print-expression (@2 err) cleanup err]
					[print-str (stdout) (" .(lf)) cleanup err]))
				
				(undefined-reference-error (begin
					[print-str (stdout) (" Undefined reference:(space)) cleanup err]
					[print-str (stdout) (@1 err) cleanup err]
					[print-str (stdout) (" .(lf)) cleanup err]))
				
				(special-form-error (if (@2 err)
					(begin
						[print-str (stdout) (" The subexpression(space)) cleanup err]
						[print-fragment (@2 err) cleanup err]
						[print-str (stdout) (" (space)does not satisfy the requirements of the expression(space)) cleanup err]
						[print-fragment (@1 err) cleanup err]
						[print-str (stdout) (" .(lf)) cleanup err])
					(begin
						[print-str (stdout) (" The expression(space)) cleanup err]
						[print-fragment (@1 err) cleanup err]
						[print-str (stdout) (" (space)has an incorrect number of subexpressions.(lf)) cleanup err])))
				
				(unexpected-char-error (begin
					[print-str (stdout) (" Unexpectedly read(space)) cleanup err]
					[print-char (stdout) (@1 err) cleanup err]
					[print-str (stdout) (" (space)at(space)) cleanup err]
					[print-uint (stdout) (@2 err) cleanup err]
					[print-str (stdout) (" .(lf)) cleanup err]))
				
				(file-access-error (if (@1 err)
					(begin
						[print-str (stdout) (" Inaccessable file:(space)) cleanup err]
						[print-str (stdout) (@1 err) cleanup err]
						[print-str (stdout) (" .(lf)) cleanup err])
					[print-str (stdout) (" Inaccessable file.) cleanup err]))
				
				(unsupported-ext-error (begin
					[print-str (stdout) (" File has unsupported extension:(space)) cleanup err]
					[print-str (stdout) (@1 err) cleanup err]
					[print-str (stdout) (" .(lf)) cleanup err]))
				
				(arguments-error [print-str (stdout)
					(" Bad command line arguments.(lf)Usage: l2evaluate (lparen)src1.l2 | obj1.o(rparen) ... - src1.l2 ...(lf)
					Outcome: Compiles each L2 file before the dash into an object file, then links all the object files(lf)
					before the dash together, and then executes each object file before the dash in the order they were(lf)
					specified. L2 files after the dash are then compiled using the global functions defined before the(lf)
					dash as macros.(lf))])
				
				(object-error [print-str (stdout) (" Bad object file supplied.(lf))])
					
				(begin)))
			
			(cleanup (begin))
			
			(cleanup-expr-buf [destroy-buffer $expr-buf])
			
			(cleanup-obj-buf [destroy-buffer $obj-buf])
			
			(_ [exit (if [= (@0 err) no-error] #0 #1)])))
