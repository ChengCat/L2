(function load-program (program ectx) (with return (begin
	(storage ct-reg (@ ectx-expr-buf $ectx))
	[visit-expressions vfind-multiple-definitions program (@ ectx-handler $ectx)]
	[classify-program-symbols (@ expr-expression $program)]
	[visit-expressions vlink-references (& expr-expression $program) (storage _ (@ ectx-handler $ectx) $ct-reg)]
	(++[visit-expressions vescape-analysis program (null)])
	[set program [use-return-symbol $program (null) $ct-reg]]
	[classify-program-symbols (@ expr-expression $program)]
	[visit-expressions vlayout-frames (& expr-expression $program) $ct-reg]
	[visit-expressions vgenerate-references program $ct-reg]
	[visit-expressions vgenerate-continuation-expressions program $ct-reg]
	[visit-expressions vgenerate-literals program $ct-reg]
	[visit-expressions vgenerate-ifs program $ct-reg]
	[visit-expressions vgenerate-function-expressions program $ct-reg]
	[visit-expressions vgenerate-storage-expressions program $ct-reg]
	(storage symbols (@ expr-symbols $program))
	(foreach (l (@ expr-parameters $program)) [prepend (@ expr-symbol $l) symbols $ct-reg])
	[set program [generate-toplevel $program $ct-reg]]
	(storage asms nil)
	[visit-expressions vlinearized-expressions program (storage _ asms $ct-reg)]
	[set asms [reverse $asms $ct-reg]]
	(storage objdest (begin))
	(storage objdest-sz (begin))
	[write-elf $asms $symbols objdest objdest-sz $ct-reg]
	(storage obj [load $objdest $objdest-sz (@ ectx-obj-buf $ectx) (@ ectx-handler $ectx)])
	[symbol-offsets-to-addresses $asms $symbols $obj]
	{return $obj})))

(function evaluate-files (srcv bindings handler) (begin
	(storage objects nil)
	(storage obj-buf [create-buffer #0])
	(storage expr-buf [create-buffer #0])
	(storage ectx $bindings $obj-buf $handler $expr-buf)
	
	(foreach (src $srcv) (begin
		(storage obj (begin))
		(storage dot [strrchr $src (char .)])
		
		(if (and $dot [str= $dot (" .l2)]) (begin
			(storage fd [open $src])
			(storage src-sz [size $fd])
			(storage src-buf [buffer-alloc $expr-buf $src-sz])
			[read $fd $src-buf $src-sz]
			[close $fd]
			
			(storage expressions nil)
			(storage pos #0)
			(while [after-leading-space $src-buf $src-sz pos]
				[append [build-expression [build-fragment $src-buf $src-sz pos $expr-buf $handler] $expr-buf $handler]
					expressions $expr-buf])
			[set obj [load-program [generate-metaprogram [make-program $expressions $expr-buf] ectx] ectx]])
			
		(if (and $dot [str= $dot (" .o)]) (begin
			(storage obj-fd [open $src])
			(storage obj-sz [size $obj-fd])
			(storage buf [buffer-alloc $obj-buf $obj-sz])
			[read $obj-fd $buf $obj-sz]
			[close $obj-fd]
			[set obj [load $buf $obj-sz $obj-buf $handler]])
			
			(begin)))
		
		[append $obj objects $obj-buf]
		[append-list (& ectx-symbols ectx) [immutable-symbols $obj $obj-buf]]))
	
	(foreach (obj $objects) [mutate-symbols $obj (@ ectx-symbols ectx)])
	(foreach (obj $objects) [[segment $obj (" .text)]])
	
	[destroy-buffer $expr-buf]
	[destroy-buffer $obj-buf]))

(function load-program-and-mutate (program ectx) (with return (begin
	(storage obj [load-program $program $ectx])
	(storage temp-reg [create-buffer #0])
	(storage ms [mutable-symbols $obj $temp-reg])
	(storage missing-sym [not-subset (function symbol= (sym1 sym2) [str= (@ sym-name $sym1) (@ sym-name $sym2)]) $ms
		(@ ectx-symbols $ectx)])
	(if $missing-sym {(@ ectx-handler $ectx) undefined-reference-error (@ sym-name $missing-sym)} (begin))
	[destroy-buffer $temp-reg]
	[mutate-symbols $obj (@ ectx-symbols $ectx)]
	{return $obj})))

(let (r [create-buffer #0])
	(do-let
			[evaluate-files [@cdr[argv $r]] (list
				[make-object-symbol (" -!-)(character(char !)) $r]
				[make-object-symbol (" -!-)(character(char !)) $r]
				[make-object-symbol (" -"-)(character(char ")) $r]
				[make-object-symbol (" -#-)(character(char #)) $r]
				[make-object-symbol (" -$-)(character(char $)) $r]
				[make-object-symbol (" -%-)(character(char %)) $r]
				[make-object-symbol (" -&-)(character(char &)) $r]
				[make-object-symbol (" -'-)(character(char ')) $r]
				[make-object-symbol (" -*-)(character(char *)) $r]
				[make-object-symbol (" -+-)(character(char +)) $r]
				[make-object-symbol (" -,-)(character(char ,)) $r]
				[make-object-symbol (" ---)(character(char -)) $r]
				[make-object-symbol (" -.-)(character(char .)) $r]
				[make-object-symbol (" -/-)(character(char /)) $r]
				[make-object-symbol (" -0-)(character(char 0)) $r]
				[make-object-symbol (" -1-)(character(char 1)) $r]
				[make-object-symbol (" -2-)(character(char 2)) $r]
				[make-object-symbol (" -3-)(character(char 3)) $r]
				[make-object-symbol (" -4-)(character(char 4)) $r]
				[make-object-symbol (" -5-)(character(char 5)) $r]
				[make-object-symbol (" -6-)(character(char 6)) $r]
				[make-object-symbol (" -7-)(character(char 7)) $r]
				[make-object-symbol (" -8-)(character(char 8)) $r]
				[make-object-symbol (" -9-)(character(char 9)) $r]
				[make-object-symbol (" -:-)(character(char :)) $r]
				[make-object-symbol (" -;-)(character(char ;)) $r]
				[make-object-symbol (" -<-)(character(char <)) $r]
				[make-object-symbol (" -=-)(character(char =)) $r]
				[make-object-symbol (" ->-)(character(char >)) $r]
				[make-object-symbol (" -?-)(character(char ?)) $r]
				[make-object-symbol (" -@-)(character(char @)) $r]
				[make-object-symbol (" -A-)(character(char A)) $r]
				[make-object-symbol (" -B-)(character(char B)) $r]
				[make-object-symbol (" -C-)(character(char C)) $r]
				[make-object-symbol (" -D-)(character(char D)) $r]
				[make-object-symbol (" -E-)(character(char E)) $r]
				[make-object-symbol (" -F-)(character(char F)) $r]
				[make-object-symbol (" -G-)(character(char G)) $r]
				[make-object-symbol (" -H-)(character(char H)) $r]
				[make-object-symbol (" -I-)(character(char I)) $r]
				[make-object-symbol (" -J-)(character(char J)) $r]
				[make-object-symbol (" -K-)(character(char K)) $r]
				[make-object-symbol (" -L-)(character(char L)) $r]
				[make-object-symbol (" -M-)(character(char M)) $r]
				[make-object-symbol (" -N-)(character(char N)) $r]
				[make-object-symbol (" -O-)(character(char O)) $r]
				[make-object-symbol (" -P-)(character(char P)) $r]
				[make-object-symbol (" -Q-)(character(char Q)) $r]
				[make-object-symbol (" -R-)(character(char R)) $r]
				[make-object-symbol (" -S-)(character(char S)) $r]
				[make-object-symbol (" -T-)(character(char T)) $r]
				[make-object-symbol (" -U-)(character(char U)) $r]
				[make-object-symbol (" -V-)(character(char V)) $r]
				[make-object-symbol (" -W-)(character(char W)) $r]
				[make-object-symbol (" -X-)(character(char X)) $r]
				[make-object-symbol (" -Y-)(character(char Y)) $r]
				[make-object-symbol (" -Z-)(character(char Z)) $r]
				[make-object-symbol (" -\-)(character(char \)) $r]
				[make-object-symbol (" -^-)(character(char ^)) $r]
				[make-object-symbol (" -_-)(character(char _)) $r]
				[make-object-symbol (" -`-)(character(char `)) $r]
				[make-object-symbol (" -a-)(character(char a)) $r]
				[make-object-symbol (" -b-)(character(char b)) $r]
				[make-object-symbol (" -c-)(character(char c)) $r]
				[make-object-symbol (" -d-)(character(char d)) $r]
				[make-object-symbol (" -e-)(character(char e)) $r]
				[make-object-symbol (" -f-)(character(char f)) $r]
				[make-object-symbol (" -g-)(character(char g)) $r]
				[make-object-symbol (" -h-)(character(char h)) $r]
				[make-object-symbol (" -i-)(character(char i)) $r]
				[make-object-symbol (" -j-)(character(char j)) $r]
				[make-object-symbol (" -k-)(character(char k)) $r]
				[make-object-symbol (" -l-)(character(char l)) $r]
				[make-object-symbol (" -m-)(character(char m)) $r]
				[make-object-symbol (" -n-)(character(char n)) $r]
				[make-object-symbol (" -o-)(character(char o)) $r]
				[make-object-symbol (" -p-)(character(char p)) $r]
				[make-object-symbol (" -q-)(character(char q)) $r]
				[make-object-symbol (" -r-)(character(char r)) $r]
				[make-object-symbol (" -s-)(character(char s)) $r]
				[make-object-symbol (" -t-)(character(char t)) $r]
				[make-object-symbol (" -u-)(character(char u)) $r]
				[make-object-symbol (" -v-)(character(char v)) $r]
				[make-object-symbol (" -w-)(character(char w)) $r]
				[make-object-symbol (" -x-)(character(char x)) $r]
				[make-object-symbol (" -y-)(character(char y)) $r]
				[make-object-symbol (" -z-)(character(char z)) $r]
				[make-object-symbol (" -|-)(character(char |)) $r]
				[make-object-symbol (" -~-)(character(char ~)) $r]
				[make-object-symbol (" @fst) @car $r]
				[make-object-symbol (" @rst) @cdr $r]
				[make-object-symbol (" lst) cons $r]
				[make-object-symbol (" symbol?) i/f:symbol? $r]
				[make-object-symbol (" emt?) nil? $r]
				[make-object-symbol (" emt) nil $r]
				[make-object-symbol (" char=) i/f:char= $r] $r) $handler]
		(handler (continuation _ (code arg0 arg1 arg2 arg3) (begin
			(switch = $code
				(multiple-definition-error [write-str (stdout) (" Multiple definition error.)])
				(param-count-mismatch-error [write-str (stdout) (" Parameter count mismatch error.)])
				(undefined-reference-error [write-str (stdout) $arg0])
				(begin))
			[exit #1])))))
