(function load-program (program ectx handler err) (with return (begin
	(storage ct-reg (@ ectx-expr-buf $ectx))
	[visit-expressions vfind-multiple-definitions program (storage _ $handler $err)]
	[classify-program-symbols (@ expr-expression $program)]
	[visit-expressions vlink-references (& expr-expression $program) (storage _ $ectx $handler $err)]
	[visit-expressions vescape-analysis program (null)]
	[set program [use-return-symbol $program (null) $ct-reg]]
	[classify-program-symbols (@ expr-expression $program)]
	[visit-expressions vlayout-frames (& expr-expression $program) $ct-reg]
	[visit-expressions vgenerate-references program $ct-reg]
	[visit-expressions vgenerate-continuation-expressions program $ct-reg]
	[visit-expressions vgenerate-literals program $ct-reg]
	[visit-expressions vgenerate-ifs program $ct-reg]
	[visit-expressions vgenerate-function-expressions program $ct-reg]
	[visit-expressions vgenerate-storage-expressions program $ct-reg]
	(storage symbols (@ expr-symbols $program))
	(foreach (l (@ expr-parameters $program)) [prepend (@ expr-symbol $l) symbols $ct-reg])
	[set program [generate-toplevel $program $ct-reg]]
	(storage asms nil)
	[visit-expressions vlinearized-expressions program (storage _ asms $ct-reg)]
	[set asms [reverse $asms $ct-reg]]
	(storage objdest (begin))
	(storage objdest-sz (begin))
	[write-elf $asms $symbols objdest objdest-sz $ct-reg]
	(storage obj [load $objdest $objdest-sz (@ ectx-obj-buf $ectx) $handler])
	[symbol-offsets-to-addresses $asms $symbols $obj]
	{return $obj})))

(storage unsupported-ext-error #0)

(function evaluate-files (srcv bindings obj-buf expr-buf handler err) (begin
	(storage objects nil)
	(storage ectx $bindings $obj-buf $expr-buf)
	(storage fds nil)
	
	(fallthrough
		(begin
			(foreach (src $srcv) [append [open $src close-files $err] fds $expr-buf])
			(foreach (src $srcv) (fd $fds) (begin
				(storage obj (begin))
				(storage dot [strrchr $src (char .)])
		
				(if (and $dot [str= $dot (" .l2)]) (begin
					(storage src-sz [size $fd close-files $err])
					(storage src-buf [buffer-alloc $expr-buf $src-sz])
					[read $fd $src-buf $src-sz close-files $err]
			
					(storage expressions nil)
					(storage pos #0)
					(while [after-leading-space $src-buf $src-sz pos]
						[append [build-expression [build-fragment $src-buf $src-sz pos $expr-buf close-files $err] $expr-buf
							close-files $err] expressions $expr-buf])
					[set obj [load-program [generate-metaprogram [make-program $expressions $expr-buf] ectx close-files $err]
						ectx close-files $err]])
			
				(if (and $dot [str= $dot (" .o)]) (begin
					(storage obj-sz [size $fd close-files $err])
					(storage buf [buffer-alloc $obj-buf $obj-sz])
					[read $fd $buf $obj-sz close-files $err]
					[set obj [load $buf $obj-sz $obj-buf close-files]])
			
					{close-files (set-storage $err unsupported-ext-error $src)}))
		
				[append $obj objects $obj-buf]
				[append-list (& ectx-symbols ectx) [immutable-symbols $obj $obj-buf]]))
	
			(foreach (obj $objects) [mutate-symbols $obj (@ ectx-symbols ectx)])
			(foreach (obj $objects) [[segment $obj (" .text)]]))
		
		(close-files (begin
			(foreach (fd $fds) [close $fd (null) (null)])
			(if [= [@0 $err] no-error] (begin) {$handler (begin)}))))))

(function load-program-and-mutate (program ectx handler err) (with return (begin
	(storage obj [load-program $program $ectx $handler $err])
	(storage temp-reg [create-buffer #0])
	(storage ms [mutable-symbols $obj $temp-reg])
	(storage missing-sym [not-subset (function symbol= (sym1 sym2) [str= (@ sym-name $sym1) (@ sym-name $sym2)]) $ms
		(@ ectx-symbols $ectx)])
	(if $missing-sym {$handler (set-storage $err undefined-reference-error (@ sym-name $missing-sym))} (begin))
	[destroy-buffer $temp-reg]
	[mutate-symbols $obj (@ ectx-symbols $ectx)]
	{return $obj})))

(storage no-error (begin))

(storage err no-error (begin) (begin) (begin) (begin))

(let (obj-buf (begin)) (expr-buf (begin))
	(fallthrough
		(begin
			[set obj-buf [create-buffer #0]]
			[set expr-buf [create-buffer #0]]
			
			[evaluate-files (list(" test.l2)$obj-buf) (list
				[make-sym (" -!-)(character(char !)) $obj-buf]
				[make-sym (" -!-)(character(char !)) $obj-buf]
				[make-sym (" -"-)(character(char ")) $obj-buf]
				[make-sym (" -#-)(character(char #)) $obj-buf]
				[make-sym (" -$-)(character(char $)) $obj-buf]
				[make-sym (" -%-)(character(char %)) $obj-buf]
				[make-sym (" -&-)(character(char &)) $obj-buf]
				[make-sym (" -'-)(character(char ')) $obj-buf]
				[make-sym (" -*-)(character(char *)) $obj-buf]
				[make-sym (" -+-)(character(char +)) $obj-buf]
				[make-sym (" -,-)(character(char ,)) $obj-buf]
				[make-sym (" ---)(character(char -)) $obj-buf]
				[make-sym (" -.-)(character(char .)) $obj-buf]
				[make-sym (" -/-)(character(char /)) $obj-buf]
				[make-sym (" -0-)(character(char 0)) $obj-buf]
				[make-sym (" -1-)(character(char 1)) $obj-buf]
				[make-sym (" -2-)(character(char 2)) $obj-buf]
				[make-sym (" -3-)(character(char 3)) $obj-buf]
				[make-sym (" -4-)(character(char 4)) $obj-buf]
				[make-sym (" -5-)(character(char 5)) $obj-buf]
				[make-sym (" -6-)(character(char 6)) $obj-buf]
				[make-sym (" -7-)(character(char 7)) $obj-buf]
				[make-sym (" -8-)(character(char 8)) $obj-buf]
				[make-sym (" -9-)(character(char 9)) $obj-buf]
				[make-sym (" -:-)(character(char :)) $obj-buf]
				[make-sym (" -;-)(character(char ;)) $obj-buf]
				[make-sym (" -<-)(character(char <)) $obj-buf]
				[make-sym (" -=-)(character(char =)) $obj-buf]
				[make-sym (" ->-)(character(char >)) $obj-buf]
				[make-sym (" -?-)(character(char ?)) $obj-buf]
				[make-sym (" -@-)(character(char @)) $obj-buf]
				[make-sym (" -A-)(character(char A)) $obj-buf]
				[make-sym (" -B-)(character(char B)) $obj-buf]
				[make-sym (" -C-)(character(char C)) $obj-buf]
				[make-sym (" -D-)(character(char D)) $obj-buf]
				[make-sym (" -E-)(character(char E)) $obj-buf]
				[make-sym (" -F-)(character(char F)) $obj-buf]
				[make-sym (" -G-)(character(char G)) $obj-buf]
				[make-sym (" -H-)(character(char H)) $obj-buf]
				[make-sym (" -I-)(character(char I)) $obj-buf]
				[make-sym (" -J-)(character(char J)) $obj-buf]
				[make-sym (" -K-)(character(char K)) $obj-buf]
				[make-sym (" -L-)(character(char L)) $obj-buf]
				[make-sym (" -M-)(character(char M)) $obj-buf]
				[make-sym (" -N-)(character(char N)) $obj-buf]
				[make-sym (" -O-)(character(char O)) $obj-buf]
				[make-sym (" -P-)(character(char P)) $obj-buf]
				[make-sym (" -Q-)(character(char Q)) $obj-buf]
				[make-sym (" -R-)(character(char R)) $obj-buf]
				[make-sym (" -S-)(character(char S)) $obj-buf]
				[make-sym (" -T-)(character(char T)) $obj-buf]
				[make-sym (" -U-)(character(char U)) $obj-buf]
				[make-sym (" -V-)(character(char V)) $obj-buf]
				[make-sym (" -W-)(character(char W)) $obj-buf]
				[make-sym (" -X-)(character(char X)) $obj-buf]
				[make-sym (" -Y-)(character(char Y)) $obj-buf]
				[make-sym (" -Z-)(character(char Z)) $obj-buf]
				[make-sym (" -\-)(character(char \)) $obj-buf]
				[make-sym (" -^-)(character(char ^)) $obj-buf]
				[make-sym (" -_-)(character(char _)) $obj-buf]
				[make-sym (" -`-)(character(char `)) $obj-buf]
				[make-sym (" -a-)(character(char a)) $obj-buf]
				[make-sym (" -b-)(character(char b)) $obj-buf]
				[make-sym (" -c-)(character(char c)) $obj-buf]
				[make-sym (" -d-)(character(char d)) $obj-buf]
				[make-sym (" -e-)(character(char e)) $obj-buf]
				[make-sym (" -f-)(character(char f)) $obj-buf]
				[make-sym (" -g-)(character(char g)) $obj-buf]
				[make-sym (" -h-)(character(char h)) $obj-buf]
				[make-sym (" -i-)(character(char i)) $obj-buf]
				[make-sym (" -j-)(character(char j)) $obj-buf]
				[make-sym (" -k-)(character(char k)) $obj-buf]
				[make-sym (" -l-)(character(char l)) $obj-buf]
				[make-sym (" -m-)(character(char m)) $obj-buf]
				[make-sym (" -n-)(character(char n)) $obj-buf]
				[make-sym (" -o-)(character(char o)) $obj-buf]
				[make-sym (" -p-)(character(char p)) $obj-buf]
				[make-sym (" -q-)(character(char q)) $obj-buf]
				[make-sym (" -r-)(character(char r)) $obj-buf]
				[make-sym (" -s-)(character(char s)) $obj-buf]
				[make-sym (" -t-)(character(char t)) $obj-buf]
				[make-sym (" -u-)(character(char u)) $obj-buf]
				[make-sym (" -v-)(character(char v)) $obj-buf]
				[make-sym (" -w-)(character(char w)) $obj-buf]
				[make-sym (" -x-)(character(char x)) $obj-buf]
				[make-sym (" -y-)(character(char y)) $obj-buf]
				[make-sym (" -z-)(character(char z)) $obj-buf]
				[make-sym (" -|-)(character(char |)) $obj-buf]
				[make-sym (" -~-)(character(char ~)) $obj-buf]
				[make-sym (" @fst) @car $obj-buf]
				[make-sym (" @rst) @cdr $obj-buf]
				[make-sym (" lst) cons $obj-buf]
				[make-sym (" symbol?) i/f:symbol? $obj-buf]
				[make-sym (" emt?) nil? $obj-buf]
				[make-sym (" emt) nil $obj-buf]
				[make-sym (" char=) i/f:char= $obj-buf] $obj-buf) $obj-buf $expr-buf handler err])
			
		(handler
			(switch = [@0 err]
				(multiple-definition-error (begin
					[print-str (stdout) (" The definition of(space)) cleanup err]
					[print-str (stdout) [@1 err] cleanup err]
					[print-str (stdout) (" (space)erroneously occured multiple times.(lf)) cleanup err]))
					
				(param-count-mismatch-error (begin
					[print-str (stdout) (" The number of arguments in(space)) cleanup err]
					[print-expression [@1 err] cleanup err]
					[print-str (stdout) (" (space)does not match the number of parameters in(space)) cleanup err]
					[print-expression [@2 err] cleanup err]
					[print-str (stdout) (" .(lf)) cleanup err]))
				
				(undefined-reference-error (begin
					[print-str (stdout) (" Undefined reference:(space)) cleanup err]
					[print-str (stdout) [@1 err] cleanup err]
					[print-str (stdout) (" .(lf)) cleanup err]))
				
				(special-form-error (if [@2 err]
					(begin
						[print-str (stdout) (" The subexpression(space)) cleanup err]
						[print-fragment [@2 err] cleanup err]
						[print-str (stdout) (" (space)does not satisfy the requirements of the expression(space)) cleanup err]
						[print-fragment [@1 err] cleanup err]
						[print-str (stdout) (" .(lf)) cleanup err])
					(begin
						[print-str (stdout) (" The expression(space)) cleanup err]
						[print-fragment [@1 err] cleanup err]
						[print-str (stdout) (" (space)has an incorrect number of subexpressions.(lf)) cleanup err])))
				
				(unexpected-char-error (begin
					[print-str (stdout) (" Unexpectedly read(space)) cleanup err]
					[print-char (stdout) [@1 err] cleanup err]
					[print-str (stdout) (" (space)at(space)) cleanup err]
					[print-uint (stdout) [@2 err] cleanup err]
					[print-str (stdout) (" .(lf)) cleanup err]))
				
				(file-access-error (if [@1 err]
					(begin
						[print-str (stdout) (" Inaccessable file:(space)) cleanup err]
						[print-str (stdout) [@1 err] cleanup err]
						[print-str (stdout) (" .(lf)) cleanup err])
					[print-str (stdout) (" Inaccessable file.) cleanup err]))
				
				(unsupported-ext-error (begin
					[print-str (stdout) (" File has unsupported extension:(space)) cleanup err]
					[print-str (stdout) [@1 err] cleanup err]
					[print-str (stdout) (" .(lf)) cleanup err]))
					
				(begin)))
			
			(cleanup (begin))
			
			(cleanup-expr-buf [destroy-buffer $expr-buf])
			
			(cleanup-obj-buf [destroy-buffer $obj-buf])
			
			(_ [exit (if [= [@0 err] no-error] #0 #1)])))
