(function frst (l) [fst [rst [get l]]])
(function ffrst (l) [fst [frst [get l]]])
(function frfrst (l) [fst [rst [frst [get l]]]])
(function rrrst (l) [rst [rst [rst [get l]]]])
(function rfst (l) [rst [fst [get l]]])
(function frfst (l) [fst [rfst [get l]]])
(function frrfst (l) [fst [rst [rfst [get l]]]])
(function frrst (l) [fst [rst [rst [get l]]]])
(function frrrst (l) [fst [rst [rst [rst [get l]]]]])
(function ffst (l) [fst [fst [get l]]])
(function llst (a b c) [lst [get a] [lst [get b] [get c]]])
(function lllst (a b c d) [lst [get a] [llst [get b] [get c] [get d]]])
(function llllst (a b c d e) [lst [get a] [lllst [get b] [get c] [get d] [get e]]])
(function lllllst (a b c d e f) [lst [get a] [llllst [get b] [get c] [get d] [get e] [get f]]])
(function llllllst (a b c d e f g) [lst [get a] [lllllst [get b] [get c] [get d] [get e] [get f] [get g]]])
(function lllllllst (a b c d e f g h) [lst [get a] [llllllst [get b] [get c] [get d] [get e] [get f] [get g] [get h]]])
(function llllllllst (a b c d e f g h i) [lst [get a] [lllllllst [get b] [get c] [get d] [get e] [get f] [get g] [get h] [get i]]])
(function lllllllllst (a b c d e f g h i j) [lst [get a] [llllllllst [get b] [get c] [get d] [get e] [get f] [get g] [get h] [get i] [get j]]])

(function $ (var)
	[llst [llllllst [-i-][-n-][-v-][-o-][-k-][-e-][nil]]
		[lllst [-g-][-e-][-t-][nil]]
			[get var]])

(function ** (l)
	(with return
		{(continuation find (first last)
			(if [nil? [get last]]
				{return [get first]}
				{find [fst [get last]] [rst [get last]]})) [fst [get l]] [rst [get l]]}))

(function binary->base2sexpr (binary)
	[lst [lllllllst [-l-][-i-][-t-][-e-][-r-][-a-][-l-][nil]] [lst (with return
		{(continuation write (count in out)
			(if $count
				{write [- $count (literal 0000000000000000000000000000000000000000000000000000000000000001)]
					[>> $in (literal 0000000000000000000000000000000000000000000000000000000000000001)]
					[lst (if [and $in (literal 0000000000000000000000000000000000000000000000000000000000000001)] [-1-] [-0-]) $out]}
				{return $out})) (literal 0000000000000000000000000000000000000000000000000000000001000000) $binary [nil]}) [nil]]])

(function & (l)
	[binary->base2sexpr
			(with return {(continuation read (in out)
				(if [nil? $in]
					{return $out}
					{read [rst $in] [+ [* $out (literal 0000000000000000000000000000000000000000000000000000000000001010)]
						(if [char= [fst $in] [-9-]] (literal 0000000000000000000000000000000000000000000000000000000000001001)
						(if [char= [fst $in] [-8-]] (literal 0000000000000000000000000000000000000000000000000000000000001000)
						(if [char= [fst $in] [-7-]] (literal 0000000000000000000000000000000000000000000000000000000000000111)
						(if [char= [fst $in] [-6-]] (literal 0000000000000000000000000000000000000000000000000000000000000110)
						(if [char= [fst $in] [-5-]] (literal 0000000000000000000000000000000000000000000000000000000000000101)
						(if [char= [fst $in] [-4-]] (literal 0000000000000000000000000000000000000000000000000000000000000100)
						(if [char= [fst $in] [-3-]] (literal 0000000000000000000000000000000000000000000000000000000000000011)
						(if [char= [fst $in] [-2-]] (literal 0000000000000000000000000000000000000000000000000000000000000010)
						(if [char= [fst $in] [-1-]] (literal 0000000000000000000000000000000000000000000000000000000000000001)
							(literal 0000000000000000000000000000000000000000000000000000000000000000))))))))))]}))
				[fst $l] (literal 0000000000000000000000000000000000000000000000000000000000000000)})])

[mywrite-uint &1 &105]