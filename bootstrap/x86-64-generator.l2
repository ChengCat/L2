(function -rax- (l r p) [mk& $l $r $p &0])
(function -rcx- (l r p) [mk& $l $r $p &1])
(function -rdx- (l r p) [mk& $l $r $p &2])
(function -rbx- (l r p) [mk& $l $r $p &3])
(function -rsp- (l r p) [mk& $l $r $p &4])
(function -rbp- (l r p) [mk& $l $r $p &5])
(function -rsi- (l r p) [mk& $l $r $p &6])
(function -rdi- (l r p) [mk& $l $r $p &7])
(function -r8- (l r p) [mk& $l $r $p &8])
(function -r9- (l r p) [mk& $l $r $p &9])
(function -r10- (l r p) [mk& $l $r $p &10])
(function -r11- (l r p) [mk& $l $r $p &11])
(function -r12- (l r p) [mk& $l $r $p &12])
(function -r13- (l r p) [mk& $l $r $p &13])
(function -r14- (l r p) [mk& $l $r $p &14])
(function -r15- (l r p) [mk& $l $r $p &15])
(function -rip- (l r p) [mk& $l $r $p &16])

(function -leaq-of-mdb-into-reg- (l r p) [mk& $l $r $p &17])
(function -movq-from-reg-into-mdb- (l r p) [mk& $l $r $p &18])
(function -jmp-rel- (l r p) [mk& $l $r $p &19])
(function -movq-mdb-to-reg- (l r p) [mk& $l $r $p &20])
(function -pushq-reg- (l r p) [mk& $l $r $p &21])
(function -movq-reg-to-reg- (l r p) [mk& $l $r $p &22])
(function -subq-imm-from-reg- (l r p) [mk& $l $r $p &23])
(function -addq-imm-to-reg- (l r p) [mk& $l $r $p &24])
(function -popq-reg- (l r p) [mk& $l $r $p &25])
(function -leave- (l r p) [mk& $l $r $p &26])
(function -ret- (l r p) [mk& $l $r $p &27])
(function -jmp-to-reg- (l r p) [mk& $l $r $p &28])
(function -je-rel- (l r p) [mk& $l $r $p &29])
(function -orq-reg-to-reg- (l r p) [mk& $l $r $p &30])
(function -movq-imm-to-reg- (l r p) [mk& $l $r $p &31])
(function -call-reg- (l r p) [mk& $l $r $p &32])
(function -label- (l r p) [mk& $l $r $p &33])
(function -stval-add-off-to-ref- (l r p) [mk& $l $r $p &34])
(function -stval-sub-rip-from-ref- (l r p) [mk& $l $r $p &35])

(function -word-size- (l r p) [mk& $l $r $p &8])
(function -cont-size- (l r p) [mk& $l $r $p [* &7 (-word-size-)]])
(function -cont-r15- (l r p) [mk& $l $r $p [* &6 (-word-size-)]])
(function -cont-r12- (l r p) [mk& $l $r $p [* &5 (-word-size-)]])
(function -cont-rbx- (l r p) [mk& $l $r $p [* &4 (-word-size-)]])
(function -cont-r13- (l r p) [mk& $l $r $p [* &3 (-word-size-)]])
(function -cont-r14- (l r p) [mk& $l $r $p [* &2 (-word-size-)]])
(function -cont-cir- (l r p) [mk& $l $r $p [* &1 (-word-size-)]])
(function -cont-rbp- (l r p) [mk& $l $r $p [* &0 (-word-size-)]])

(function vlayout-frames (n r) (with return (begin
	(if (@expr-return-symbol $n) (begin
		(sym-size! (@expr-return-symbol $n) (-word-size-))
		[prepend (@expr-return-symbol $n) (expr-symbols [get-parent-function $n]) $r])
		(begin))
		
	(switch = (@expr-type $n)
		((-function-) (begin
			(let (parameter-offset [* &7 (-word-size-)])
				(foreach (t (@expr-parameters $n)) (begin
					(sym-offset! (@expr-symbol $t) $parameter-offset)
					[set parameter-offset [+ $parameter-offset (-word-size-)]])))
			(let (symbol-offset &0)
				(foreach (u [reverse (@expr-symbols $n) $r]) (begin
					[set symbol-offset [- $symbol-offset [pad-size (@sym-size $u) (-word-size-)]]]
					(sym-offset! $u $symbol-offset))))))
		
		((-continuation-) (-with-) (begin
			(if (@expr-escapes $n) (begin
				(sym-size! (@expr-symbol(@expr-reference $n)) (-cont-size-))
				[append (@expr-symbol(@expr-reference $n)) (expr-symbols [get-parent-function $n]) $r])
				(begin))
			(foreach (t (@expr-parameters $n)) (begin
				(sym-size! (@expr-symbol $t) (-word-size-))
				[append (@expr-symbol $t) (expr-symbols [get-parent-function $n]) $r]))))
		
		((-storage-) (begin
			(sym-size! (@expr-symbol(@expr-reference $n)) [* [length (@expr-arguments $n)] (-word-size-)])
			[append (@expr-symbol(@expr-reference $n)) (expr-symbols [get-parent-function $n]) $r]))
		
		(begin))
	
	{return $n})))

(function make-load (sym offset dest-reg scratch-reg r) (with return
	(let (container nil) (begin
		(if [= (@sym-type $sym) (-dynamic-storage-)]
			(let (op1 [make-literal [+ (@sym-offset $sym) $offset] $r])
				[append [make-asm (-movq-mdb-to-reg-) (list $op1 [make-asm (-rbp-) nil $r] $dest-reg $r) $r] container $r])
			(begin
				(let (op1 [make-asm (-stval-add-off-to-ref-) (list [use-symbol $sym $r] [make-literal $offset $r] $r) $r])
					[append [make-asm (-movq-imm-to-reg-) (list $op1 $scratch-reg $r) $r] container $r])
				[append [make-asm (-movq-mdb-to-reg-) (list [make-literal &0 $r] $scratch-reg $dest-reg $r) $r] container $r]))
		{return [make-begin $container $r]}))))

(function make-store (src-reg sym offset scratch-reg r) (with return
	(let (container nil) (begin
		(if [= (@sym-type $sym) (-dynamic-storage-)]
			(let (op2 [make-literal [+ (@sym-offset $sym) $offset] $r])
				[append [make-asm (-movq-from-reg-into-mdb-) (list $src-reg $op2 [make-asm (-rbp-) nil $r] $r) $r] container $r])
			(begin
				(let (op1 [make-asm (-stval-add-off-to-ref-) (list [use-symbol $sym $r] [make-literal $offset $r] $r) $r])
					[append [make-asm (-movq-imm-to-reg-) (list $op1 $scratch-reg $r) $r] container $r])
				[append [make-asm (-movq-from-reg-into-mdb-) (list $src-reg [make-literal &0 $r] $scratch-reg $r) $r] container $r]))
		{return [make-begin $container $r]}))))
