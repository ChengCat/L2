(function char-init (s r p) (use-memo $p (`(storage () (null) (char (,[fst $s])))$r)))

(function character-struct (l r p) (use-memo $p (`[* &2(unit)]$r)))

(function cs-list-flag (l r p) (use-memo $p (`[+(,[fst $l])&0]$r)))

(function <cs-list-flag (l r p) (use-memo $p (`[get[+(,[fst $l])&0]]$r)))

(function cs-list-flag< (l r p) (use-memo $p (`[set[+(,[fst $l])&0](,[frst $l])]$r)))

(function cs-character (l r p) (use-memo $p (`[+(,[fst $l])(unit)]$r)))

(function <cs-character (l r p) (use-memo $p (`[get[+(,[fst $l])(unit)]]$r)))

(function cs-character< (l r p) (use-memo $p (`[set[+(,[fst $l])(unit)](,[frst $l])]$r)))

(function sexpr-struct (l r p) (use-memo $p (`[* &2(unit)]$r)))

(function i/f:lst? (s) (if (<cs-list-flag $s) (true) (false)))

(++(function char= (a b) (if [= (<cs-character $a) (<cs-character $b)] (true) (false))))

(storage characters
	&0 &0 &0 &0 &0 &0 &0 &0 &0 &0 &0 &0 &0 &0 &0 &0 &0 &0 &0 &0 &0 &0 &0 &0 &0 &0 &0 &0 &0 &0 &0 &0 &0 (char-init !) (char-init ")
	(char-init #) (char-init $) (char-init %) (char-init &) (char-init ') &0 &0 (char-init *) (char-init +) (char-init ,)
	(char-init -) (char-init .) (char-init /) (char-init 0) (char-init 1) (char-init 2) (char-init 3) (char-init 4) (char-init 5)
	(char-init 6) (char-init 7) (char-init 8) (char-init 9) (char-init :) (char-init ;) (char-init <) (char-init =) (char-init >)
	(char-init ?) (char-init @) (char-init A) (char-init B) (char-init C) (char-init D) (char-init E) (char-init F) (char-init G)
	(char-init H) (char-init I) (char-init J) (char-init K) (char-init L) (char-init M) (char-init N) (char-init O) (char-init P)
	(char-init Q) (char-init R) (char-init S) (char-init T) (char-init U) (char-init V) (char-init W) (char-init X) (char-init Y)
	(char-init Z) &0 (char-init \) &0 (char-init ^) (char-init _) (char-init `) (char-init a) (char-init b) (char-init c)
	(char-init d) (char-init e) (char-init f) (char-init g) (char-init h) (char-init i) (char-init j) (char-init k) (char-init l)
	(char-init m) (char-init n) (char-init o) (char-init p) (char-init q) (char-init r) (char-init s) (char-init t) (char-init u)
	(char-init v) (char-init w) (char-init x) (char-init y) (char-init z) &0 (char-init |) &0 (char-init ~) &0)

(function character (s r p) (use-memo $p (`($(loc characters (,[fst $s]) (unit)))$r)))

(function build-symbol (str r) (with return
	(let (sexprs nil) (begin
		(while [getb $str] (begin
			[append (character [getb $str]) sexprs $r]
			[set str [+ $str &1]]))
		{return $sexprs}))))

(function after-leading-space (l2src l2src-sz pos) (with return
	{(continuation loop ()
		(if (and [< $$pos $l2src-sz] [isspace [getb[+ $l2src $$pos]]])
			(begin [set $pos [+ $$pos &1]] {loop})
			{return [- $l2src-sz $$pos]}))}))

(function build-sigil (sigil l2src l2src-sz pos r handler) (with return (begin
	(if [= $l2src-sz $$pos] {return [build-symbol $sigil $r]} (begin))
	(let (d [getb [+ $l2src $$pos]])
		(if (or [isspace $d] [= $d (rparen)] [= $d (rbrace)] [= $d (rbracket)] [= $d (lparen)] [= $d (lbrace)] [= $d (lbracket)])
			{return [build-symbol $sigil $r]}
			(let (sexprs nil) (begin
				[append [build-symbol $sigil $r] sexprs $r]
				[append [build-expr-list $l2src $l2src-sz $pos $r $handler] sexprs $r]
				{return $sexprs})))))))

(function build-list (primitive delimeter l2src l2src-sz pos r handler) (with return
	(let (sexprs nil) (begin
		[append [build-symbol $primitive $r] sexprs $r]
		(while (true) (begin
			(let (rem [after-leading-space $l2src $l2src-sz $pos])
				(if (and $rem [= [getb [+ $l2src $$pos]] $delimeter])
					(begin [set $pos [+ $$pos &1]] {return $sexprs})
					(begin)))
			[append [build-expr-list $l2src $l2src-sz $pos $r $handler] sexprs $r]))
		{return $sexprs}))))

(function unexpected-char (l r) (` &0 $r))

(function build-expr-list (l2src l2src-sz pos r handler) (with return
	(if [= $l2src-sz $$pos]
		{$handler (unexpected-char) build-expr-list &0 $$pos}
		(let (c [getb [+ $l2src $$pos]])
			(if (or [isspace $c] [= $c (rparen)] [= $c (rbrace)] [= $c (rbracket)])
				{$handler (unexpected-char) build-expr-list $c $$pos}
				(begin
					[set $pos [+ $$pos &1]]
					{return (switch = $c
						((lparen) [get-cdr [build-list (" expression) (rparen) $l2src $l2src-sz $pos $r $handler]])
						((lbrace) [build-list (" jump) (rbrace) $l2src $l2src-sz $pos $r $handler])
						((lbracket) [build-list (" invoke) (rbracket) $l2src $l2src-sz $pos $r $handler])
						((char $) [build-sigil (" $) $l2src $l2src-sz $pos $r $handler])
						((char &) [build-sigil (" &) $l2src $l2src-sz $pos $r $handler])
						((char ,) [build-sigil (" ,) $l2src $l2src-sz $pos $r $handler])
						((char `) [build-sigil (" `) $l2src $l2src-sz $pos $r $handler])
						(let (l nil) (begin
							(do-while (begin
									[append (character $c) l $r]
									(if [= $$pos $l2src-sz] {return $l} (begin))
									[set c [getb [+ $l2src $$pos]]]
									[set $pos [+ $$pos &1]])
								(not (or [isspace $c] [= $c (lparen)] [= $c (rparen)] [= $c (lbrace)] [= $c (rbrace)]
									[= $c (lbracket)] [= $c (rbracket)])))
							[set $pos [- $$pos &1]]
							{return $l})))}))))))

(function string? (d) (with return (begin
	(foreach (t $d)
		(if [i/f:lst? $t]
			{return (false)}
			(begin)))
	{return (true)})))

(function to-string (d r) (with return
	(let (str [region-alloc $r [+ [length $d] &1]]) (i &0) (begin
		(foreach (t $d) (begin
			[setb [+ $str $i] (<cs-character $t)]
			[set i [+ $i &1]]))
		[setb [+ $str $i] (null)]
		{return $str}))))

(function print-expr-list (d) (begin
	[write-char (stdout) (lparen)]
	(if [nil? $d] (begin) (begin
		(if [i/f:lst? [get-car $d]]
			[print-expr-list [get-car $d]]
			[write-char (stdout) (<cs-character [get-car $d])])
		[write-char (stdout) (space)]
		[write-char (stdout) (char .)]
		[write-char (stdout) (space)]
		[print-expr-list [get-cdr $d]]))
	[write-char (stdout) (rparen)]))

[write-str (stdout) (" Starting here:(lf))]

(let (r [create-region &0]) (pos &0)
	(do-let (begin
			[write-str (stdout) (" (lparen)l(lbrace)lokay(rbrace)a(rparen)o)]
			[print-expr-list [build-expr-list (" (lparen)l(lbrace)lokay(rbrace)a(rparen)o) &18 pos $r $handler]]
			[build-symbol (" Hello) $r])
		(handler (continuation () (code src character pos) (begin
			[write-str (stdout) (" Error occured.)]
			[destroy-region $r]
			[exit &1])))))
