(** Returns a list with mapper applied to each element.
(function map (l mapper)
	(with-continuation return
		{(make-continuation aux (in out)
			(if [nil? [' in]]
				{return [reverse [' out]]}
				{aux [rst [' in]] [lst [[' mapper] [fst [' in]]] [' out]]})) [' l] [nil]})))

(function let (l)
	(`(with-continuation return
		(,[llst (` continue) (`(make-continuation (,[fst [' l]])
			(,[map [frst [' l]] fst])
			{return (,[frrst [' l]])})) [map [frst [' l]] frst]]))))
