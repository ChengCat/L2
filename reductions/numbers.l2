(** Turns a 4-byte integer into base-2 s-expression representation of it.
(function binary->base2sexpr (binary)
	[lst [lst [-b-] [nil]] [lst (with-continuation return
		{(make-continuation write (count in out)
			(if [' count]
				{write [- [' count] (b 00000000000000000000000000000001)]
					[>> [' in] (b 00000000000000000000000000000001)]
					[lst (if [and [' in] (b 00000000000000000000000000000001)] [-1-] [-0-]) [' out]]}
				{return [' out]})) (b 00000000000000000000000000100000) [' binary] [nil]}) [nil]]]))

(function d (l)
	[binary->base2sexpr
		(** Turns the base-10 s-expression input into a 4-byte integer.
			(with-continuation return {(make-continuation read (in out)
				(if [nil? [' in]]
					{return [' out]}
					{read [rst [' in]] [+ [* [' out] (b 00000000000000000000000000001010)]
						(if [9? [fst [' in]]] (b 00000000000000000000000000001001)
						(if [8? [fst [' in]]] (b 00000000000000000000000000001000)
						(if [7? [fst [' in]]] (b 00000000000000000000000000000111)
						(if [6? [fst [' in]]] (b 00000000000000000000000000000110)
						(if [5? [fst [' in]]] (b 00000000000000000000000000000101)
						(if [4? [fst [' in]]] (b 00000000000000000000000000000100)
						(if [3? [fst [' in]]] (b 00000000000000000000000000000011)
						(if [2? [fst [' in]]] (b 00000000000000000000000000000010)
						(if [1? [fst [' in]]] (b 00000000000000000000000000000001)
							(b 00000000000000000000000000000000))))))))))]})) [fst [' l]] (b 00000000000000000000000000000000)}))])
